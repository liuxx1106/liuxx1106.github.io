<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot 实现 MySQL 百万级数据量导出并避免 OOM 的解决方案</title>
    <link href="/2023/07/14/springboot-bigdata-export/"/>
    <url>/2023/07/14/springboot-bigdata-export/</url>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>数据导出在项目开发中非常常见，一般的处理流程就是从数据库读取数据，生成excel等格式数据，通过流形式输出给前端。但百万级数据量的数据导出其实用到的并不多，主要在于业务上可能也没有必要性。今天主要讨论下从技术的角度出发，怎样实现百万级数据量导出并且不造成OOM。</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>由于数据量很大，全量加载必然不行，所以我们采用分批加载，而Mysql本身支持Stream查询，我们可以通过Stream流获取数据，然后将数据逐条刷入到文件中，每次刷入文件后再从内存中移除这条数据，从而避免OOM。</p></blockquote><p>由于采用了数据逐条刷入文件，而且数据量达到百万级，所以文件格式就不要采用excel了，excel2007最大才支持104万行的数据,所以我们选择使用csv格式。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ul><li>jpa实现</li></ul><blockquote><p>核心注解如下，需要加入到具体的Repository之上。方法的返回类型定义成Stream。Integer.MIN_VALUE告诉jdbc driver逐条返回数据。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@QueryHints(value = @QueryHint(name = HINT_FETCH_SIZE, value = &quot;&quot; + Integer.MIN_VALUE))</span><br><span class="hljs-meta">@Query(value = &quot;select t from Todo t&quot;)</span><br>Stream&lt;Todo&gt; <span class="hljs-title function_">streamAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><blockquote><p>此外还需要在Stream处理数据的方法之上添加@Transactional(readOnly &#x3D; true)，保证事物是只读的。</p></blockquote><blockquote><p>同时需要注入javax.persistence.EntityManager，通过detach从内存中移除已经使用后的对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/todos.csv&quot;, method = RequestMethod.GET)</span><br><span class="hljs-meta">@Transactional(readOnly = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportTodosCSV</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br> response.addHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/csv&quot;</span>);<br> response.addHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=todos.csv&quot;</span>);<br> response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br> <span class="hljs-keyword">try</span>(Stream&lt;Todo&gt; todoStream = todoRepository.streamAll()) &#123;<br>  <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>  todoStream.forEach(rethrowConsumer(todo -&gt; &#123;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> todoToCSV(todo);<br>   out.write(line);<br>   out.write(<span class="hljs-string">&quot;\n&quot;</span>);<br>   entityManager.detach(todo);<br>  &#125;));<br>  out.flush();<br> &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>  log.info(<span class="hljs-string">&quot;Exception occurred &quot;</span> + e.getMessage(), e);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Exception occurred while exporting results&quot;</span>, e);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>MySQL</tag>
      
      <tag>海量数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer II 009. 乘积小于 K 的连续子数组的个数</title>
    <link href="/2023/07/14/algorithm-offer5/"/>
    <url>/2023/07/14/algorithm-offer5/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/ZVAVXX/?envType=study-plan-v2&envId=coding-interviews-special">leetcode地址</a><br>给定一个正整数数组 nums和整数 k ，请找出该数组内乘积小于 k 的连续的子数组的个数。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><blockquote><p>输入: nums &#x3D; [10,5,2,6], k &#x3D; 100<br>输出: 8<br>解释: 8 个乘积小于 100 的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。<br>需要注意的是 [10,5,2] 并不是乘积小于100的子数组。</p></blockquote><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><blockquote><p>输入: nums &#x3D; [1,2,3], k &#x3D; 0<br>输出: 0</p></blockquote><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10 ^ 4<br>1 &lt;&#x3D; nums[i] &lt;&#x3D; 1000<br>0 &lt;&#x3D; k &lt;&#x3D; 10 ^ 6</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li><ol><li>双指针遍历。定义左右指针left和right, right向右扫描，找到以left为起点的符合条件的子数组；当不符合条件时left右移，同时重置right，重复之前的操作；</li></ol></li><li><ol start="2"><li>我们遍历整个数组 nums，定义两个指针 left 和 right，表示子数组的左右端点，用 res 变量保存符合条件的连续子数组的个数，并且定义 product 变量，表示当前子数组的乘积。<br>遍历数组中的每一个数，把当前数的值累乘到 product 中，如果 product 大于等于设定的值 k，向左移动左指针 left 并把左端元素除以 product 的值，直到当前区间内所有数的乘积都小于 k 为止。此时，减去左右端点之间的数的个数加一（因为是左开右闭区间），得到符合条件的区间的个数。<br>最后返回 res 变量的值，即为符合条件的连续子数组的个数。</li></ol></li></ul><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br> 方法<span class="hljs-number">1.</span> 双指针<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numSubarrayProductLessThanK</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//左边界</span><br>        <span class="hljs-keyword">while</span>(left&lt; nums.length) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 乘积</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> left; <span class="hljs-comment">// 每次重置右边界</span><br>            <span class="hljs-keyword">while</span>(right &lt; nums.length) &#123;<br>                sum *= nums[right]; <span class="hljs-comment">// 累乘判断是否小于K</span><br>                <span class="hljs-keyword">if</span>(sum &lt; k) &#123;<br>                    count++;<br>                    right++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            left++; <span class="hljs-comment">// 左边界前进一位</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>     &#125;<br><br> 方法<span class="hljs-number">2.</span> 滑动窗口<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numSubarrayProductLessThanK</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (k &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (right &lt; nums.length) &#123;<br>            product *= nums[right];<br>            <span class="hljs-keyword">while</span> (left &lt;= right &amp;&amp; product &gt;= k) &#123;<br>                product /= nums[left++];<br>            &#125;<br>            <span class="hljs-comment">//</span><br>            res += (right - left + <span class="hljs-number">1</span>);<br>            right++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//1.map解法</span><br>方法<span class="hljs-number">1.</span> 双指针<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">numSubarrayProductLessThanK</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    count := <span class="hljs-number">0</span> <span class="hljs-comment">// 记录个数</span><br>    left := <span class="hljs-number">0</span>  <span class="hljs-comment">// 左边界</span><br>    <span class="hljs-keyword">for</span> left &lt; <span class="hljs-built_in">len</span>(nums) &#123;<br>        sum := <span class="hljs-number">1</span>     <span class="hljs-comment">// 乘积</span><br>        right := left <span class="hljs-comment">// 每次重置右边界</span><br>        <span class="hljs-keyword">for</span> right &lt; <span class="hljs-built_in">len</span>(nums) &#123;<br>            sum *= nums[right] <span class="hljs-comment">// 累乘判断是否小于K</span><br>            <span class="hljs-keyword">if</span> sum &lt; k &#123;<br>                count++<br>                right++<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        left++ <span class="hljs-comment">// 左边界前进一位</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> count<br>&#125;<br><br> 方法<span class="hljs-number">2.</span> 滑动窗口<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">numSubarrayProductLessThanK</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> k &lt;= <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br>    left, right, res, product := <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> right &lt; <span class="hljs-built_in">len</span>(nums) &#123;<br>        product *= nums[right]<br>        <span class="hljs-keyword">for</span> left &lt;= right &amp;&amp; product &gt;= k &#123;<br>            product /= nums[left]<br>            left++<br>        &#125;<br>        res += (right - left + <span class="hljs-number">1</span>)<br>        right++<br>    &#125;<br>     <br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer II 006. 排序数组中两个数字之和</title>
    <link href="/2023/07/14/algorithm-offer4/"/>
    <url>/2023/07/14/algorithm-offer4/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/kLl5u1/?envType=study-plan-v2&envId=coding-interviews-special">leetcode地址</a><br>给定一个已按照 升序排列  的整数数组 numbers ，请你从数组中找出两个数满足相加之和等于目标数 target 。</p><p>函数应该以长度为 2 的整数数组的形式返回这两个数的下标值。numbers 的下标 从 0 开始计数 ，所以答案数组应当满足 0 &lt;&#x3D; answer[0] &lt; answer[1] &lt; numbers.length 。</p><p>假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><blockquote><p>输入：numbers &#x3D; [1,2,4,6,10], target &#x3D; 8<br>输出：[1,3]<br>解释：2 与 6 之和等于目标数 8 。因此 index1 &#x3D; 1, index2 &#x3D; 3 。</p></blockquote><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><blockquote><p>输入：numbers &#x3D; [2,3,4], target &#x3D; 6<br>输出：[0,2]</p></blockquote><h4 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h4><blockquote><p>输入：numbers &#x3D; [-1,0], target &#x3D; -1<br>输出：[0,1]</p></blockquote><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>2 &lt;&#x3D; numbers.length &lt;&#x3D; 3 * 104<br>-1000 &lt;&#x3D; numbers[i] &lt;&#x3D; 1000<br>numbers 按 非递减顺序 排列<br>-1000 &lt;&#x3D; target &lt;&#x3D; 1000<br>仅存在一个有效答案</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li><ol><li>由于给定数组为有序排列，所以第一想到的应该是二分查找，遍历数组，然后通过二分查找去找到target-numbers[i]。时间复杂度O(nlogn),空间复杂度O(1)。</li></ol></li><li><ol start="2"><li>由于给定数组为有序排列，所以可以用双指针从数组两边扫描不断逼近正确答案。时间复杂度为O(n), 空间复杂度为O(1);</li></ol></li></ul><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br> <span class="hljs-comment">//方法1. 二分查找</span><br>    <span class="hljs-comment">// public int[] twoSum(int[] numbers, int target) &#123;</span><br>    <span class="hljs-comment">//         if(numbers.length == 0 || numbers == null) return new int[0];</span><br>    <span class="hljs-comment">//         for(int i = 0; i&lt;numbers.length;i++) &#123;</span><br>    <span class="hljs-comment">//             int t = target - numbers[i];</span><br>    <span class="hljs-comment">//             int index = binarySearch(numbers, t, i+1, numbers.length-1);</span><br>    <span class="hljs-comment">//             if(index != -1) &#123;</span><br>    <span class="hljs-comment">//                 return new int[]&#123;i, index&#125;;</span><br>    <span class="hljs-comment">//             &#125;</span><br><br>    <span class="hljs-comment">//         &#125;</span><br>    <span class="hljs-comment">//         return new int[0];</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// int binarySearch(int[] numbers, int t,int left,int right) &#123;</span><br>    <span class="hljs-comment">//     while(left &lt;= right) &#123;</span><br>    <span class="hljs-comment">//         int mid = (left + right) &gt;&gt; 1;</span><br>    <span class="hljs-comment">//         if(numbers[mid] == t) &#123;</span><br>    <span class="hljs-comment">//             return mid;</span><br>    <span class="hljs-comment">//         &#125;else if(numbers[mid] &gt; t) &#123;</span><br>    <span class="hljs-comment">//             right = mid -1;</span><br>    <span class="hljs-comment">//         &#125;else if(numbers[mid] &lt; t) &#123;</span><br>    <span class="hljs-comment">//             left = mid +1;</span><br>    <span class="hljs-comment">//         &#125;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     return -1;</span><br>    <span class="hljs-comment">// &#125;</span><br><br> <span class="hljs-comment">//方法2. 双指针</span><br>    <span class="hljs-comment">// public int[] twoSum(int[] numbers, int target) &#123;</span><br>    <span class="hljs-comment">//     if(numbers.length == 0 || numbers == null) return new int[0];</span><br>    <span class="hljs-comment">//         </span><br>    <span class="hljs-comment">//         int left = 0;</span><br>    <span class="hljs-comment">//         int right = numbers.length -1;</span><br>    <span class="hljs-comment">//         while(left&lt;right) &#123;</span><br>    <span class="hljs-comment">//             int sum = numbers[left] + numbers[right];</span><br>    <span class="hljs-comment">//             if(sum == target) &#123;</span><br>    <span class="hljs-comment">//                 return new int[]&#123;left,right&#125;;</span><br>    <span class="hljs-comment">//             &#125; else if(sum&lt;target) &#123;</span><br>    <span class="hljs-comment">//                 left++;</span><br>    <span class="hljs-comment">//             &#125; else&#123;</span><br>    <span class="hljs-comment">//                 right--;</span><br>    <span class="hljs-comment">//             &#125;</span><br>    <span class="hljs-comment">//         &#125;</span><br>    <span class="hljs-comment">//         return new int[0];</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// 方法3. hashmap</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] numbers, <span class="hljs-type">int</span> target) &#123;<br>        Map&lt;Integer, Integer&gt; maps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i= <span class="hljs-number">0</span>;i&lt;numbers.length;i++) &#123;<br>            <span class="hljs-keyword">if</span>(maps.containsKey(target-numbers[i])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;maps.get(target-numbers[i]),i&#125;;<br>            &#125;<br>            maps.put(numbers[i],i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//1.map解法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(numbers []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    maps := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>)<br>    <span class="hljs-keyword">for</span> i, num := <span class="hljs-keyword">range</span> numbers &#123;<br>        <span class="hljs-keyword">if</span> j, ok := maps[target-num]; ok &#123;<br>            <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;j, i&#125;<br>        &#125;<br>        maps[num] = i<br>    &#125;<br>    <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// 2. 二分查找</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(numbers []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(numbers) == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(numbers); i++ &#123;<br>        t := target - numbers[i]<br>        index := binarySearch(numbers, t, i+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(numbers)<span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">if</span> index != <span class="hljs-number">-1</span> &#123;<br>            <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;i, index&#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(numbers []<span class="hljs-type">int</span>, t, left, right <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">for</span> left &lt;= right &#123;<br>        mid := (left + right) &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> numbers[mid] == t &#123;<br>            <span class="hljs-keyword">return</span> mid<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> numbers[mid] &gt; t &#123;<br>            right = mid - <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> numbers[mid] &lt; t &#123;<br>            left = mid + <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><br><span class="hljs-comment">//3.双指针</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(numbers []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(numbers) == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>    &#125;<br><br>    left, right := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(numbers)<span class="hljs-number">-1</span><br><br>    <span class="hljs-keyword">for</span> left &lt; right &#123;<br>        sum := numbers[left] + numbers[right]<br>        <span class="hljs-keyword">if</span> sum == target &#123;<br>            <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;left, right&#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> sum &lt; target &#123;<br>            left++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            right--<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>二分查找， 双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer II 003. 前 n 个数字二进制中 1 的个数</title>
    <link href="/2023/07/14/algorithm-offer3/"/>
    <url>/2023/07/14/algorithm-offer3/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/w3tCBm/?envType=study-plan-v2&envId=coding-interviews-special">leetcode地址</a><br>给定一个非负整数 n ，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><blockquote><p>输入: n &#x3D; 2<br>输出: [0,1,1]<br>解释:<br>0 –&gt; 0<br>1 –&gt; 1<br>2 –&gt; 10</p></blockquote><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><blockquote><p>输入: n &#x3D; 5<br>输出: [0,1,1,2,1,2]<br>解释:<br>0 –&gt; 0<br>1 –&gt; 1<br>2 –&gt; 10<br>3 –&gt; 11<br>4 –&gt; 100<br>5 –&gt; 101</p></blockquote><p>说明 :</p><ul><li>0 &lt;&#x3D; n &lt;&#x3D; 105</li></ul><p>进阶:</p><ul><li>给出时间复杂度为 O(n*sizeof(integer)) 的解答非常容易。但你可以在线性时间 O(n) 内用一趟扫描做到吗？</li><li>要求算法的空间复杂度为 O(n) 。</li><li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount ）来执行此操作。</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>求二进制中的1的个数，我们可以根据数的奇偶性原则找到对应关系：</p><ul><li>当数字i为偶数时，它的二进制中1的个数等于i&#x2F;2二进制中1的个数。因为在二进制中除以2即相当于把原来的数字右移一位，在高位补0，如 110（6）右移一位为011（3）。由此可得到状态方程：f(i) &#x3D; f(i&gt;&gt;1), i为偶数；</li><li>当数字i为奇数时，它的二进制中1的个数等于它的前一位数字中1的个数加1（因为它的前一位数字为偶数，最低位为0），可得到状态方程f(i) &#x3D; f(i-1) + 1;由此可得到以下代码：</li></ul><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//利用奇偶性质，偶数的二进制1的个数一定等于右移一位后的1的个数</span><br>    <span class="hljs-comment">//奇数的二进制1的个数一定等于前一个数的1的个数+1</span><br>    <span class="hljs-comment">//得到状态方程：f(i) = f(i-1) +1; i为奇数</span><br>    <span class="hljs-comment">// f(i) = f(i&gt;&gt;1)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countBits(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br>            ans[i] = ans[i&gt;&gt;<span class="hljs-number">1</span>] + (i&amp;<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br><br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countBits</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    <span class="hljs-comment">//利用奇偶性质，偶数的二进制1的个数一定等于右移一位后的1的个数</span><br>    <span class="hljs-comment">//奇数的二进制1的个数一定等于前一个数的1的个数+1</span><br>    <span class="hljs-comment">//得到状态方程：f(i) = f(i-1) +1; i为奇数</span><br>    <span class="hljs-comment">// f(i) = f(i&gt;&gt;1)</span><br>    ans := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>;i&lt;=n; i++ &#123;<br>        <span class="hljs-keyword">if</span>((i&amp;<span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 偶数</span><br>            ans[i] = ans[i&gt;&gt;<span class="hljs-number">1</span>]<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            ans[i] = ans[i<span class="hljs-number">-1</span>] +<span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>奇偶性质</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer II 002. 二进制加法</title>
    <link href="/2023/07/14/algorithm-offer2/"/>
    <url>/2023/07/14/algorithm-offer2/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/JFETK5/description/?envType=study-plan-v2&envId=coding-interviews-special">leetcode地址</a></p><ul><li>剑指 Offer II 002. 二进制加法<br>给定两个 01 字符串 a 和 b ，请计算它们的和，并以二进制字符串的形式输出。<br>输入为 非空 字符串且只包含数字 1 和 0。</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>示例 1:</p><blockquote><p>输入: a &#x3D; “11”, b &#x3D; “10”<br>输出: “101”</p></blockquote><p>示例 2:</p><blockquote><p>输入: a &#x3D; “1010”, b &#x3D; “1011”<br>输出: “10101”</p></blockquote><p>提示：</p><p>每个字符串仅由字符 ‘0’ 或 ‘1’ 组成。<br>1 &lt;&#x3D; a.length, b.length &lt;&#x3D; 10^4<br>字符串如果不是 “0” ，就都不含前导零。</p><ul><li>提示:</li><li>-2 ^ 31 &lt;&#x3D; a, b &lt;&#x3D; 2 ^ 31 - 1</li><li>b !&#x3D; 0</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题还是比较好理解的，类似整数加法，只不过是“逢2进1”，我们只需要以两个数的右边对齐，逐位开始相加（需加上进位，初始值位0），若大于2则进位1，取2的余数作为结果拼接上；若小于2直接拼接到结果。两个字符串都遍历完且没有进位返回结果。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>本题给出的二进制数字是字符串形式，不可以转化成 int 型，因为可能溢出；</li></ul><ul><li>两个「加数」的字符串长度可能不同；</li><li>在最后，如果进位 carry 不为 0，那么最后需要计算进位；</li></ul><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBinary</span><span class="hljs-params">(String a, String b)</span> &#123;<br>       <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(); <span class="hljs-comment">// 返回结果</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> a.length() - <span class="hljs-number">1</span>; <span class="hljs-comment">//遍历索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> b.length() - <span class="hljs-number">1</span>; <span class="hljs-comment">//遍历索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 进位初始值为0</span><br>        <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span> || carry != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 当字符串a,b都遍历完且carry为0时结束。</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">digitA</span> <span class="hljs-operator">=</span> i &gt;= <span class="hljs-number">0</span> ? a.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">0</span>; <span class="hljs-comment">// 从右边开始取每一位的值</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">digitB</span> <span class="hljs-operator">=</span> j &gt;= <span class="hljs-number">0</span> ? b.charAt(j) - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> digitA + digitB + carry; <span class="hljs-comment">// 求和</span><br>            carry = sum &gt;= <span class="hljs-number">2</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>; <span class="hljs-comment">// 取进位</span><br>            sum = sum &gt;= <span class="hljs-number">2</span> ? sum - <span class="hljs-number">2</span> : sum; <span class="hljs-comment">// 若和大于2取余数；</span><br>            res = res.append(sum);结果拼接<br>            i--; <span class="hljs-comment">// 从右往左遍历</span><br>            j--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.reverse().toString(); <span class="hljs-comment">// 因为从右边开始拼接，结果需反转</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addBinary</span><span class="hljs-params">(a <span class="hljs-type">string</span>, b <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    res := <span class="hljs-string">&quot;&quot;</span><br>    i := <span class="hljs-built_in">len</span>(a) - <span class="hljs-number">1</span><br>    j := <span class="hljs-built_in">len</span>(b) - <span class="hljs-number">1</span><br>    carry := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span> || carry != <span class="hljs-number">0</span> &#123;<br>        digitA := <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-number">0</span> &#123;<br>            digitA = <span class="hljs-type">int</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>)<br>        &#125;<br>        digitB := <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> j &gt;= <span class="hljs-number">0</span> &#123;<br>            digitB = <span class="hljs-type">int</span>(b[j] - <span class="hljs-string">&#x27;0&#x27;</span>)<br>        &#125;<br>        sum := digitA + digitB + carry<br>        carry = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> sum &gt;= <span class="hljs-number">2</span> &#123;<br>            carry = <span class="hljs-number">1</span><br>        &#125;<br>        sum = sum % <span class="hljs-number">2</span><br>        res = strconv.Itoa(sum) + res<br>        i--<br>        j--<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>二进制加法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer II 001. 整数除法</title>
    <link href="/2023/07/13/algorithm-offer1/"/>
    <url>/2023/07/13/algorithm-offer1/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/xoh6Oh/?envType=study-plan-v2&id=coding-interviews-special">leetcode地址</a></p><ul><li>剑指 Offer II 001. 整数除法</li><li>简单</li><li>253</li><li>给定两个整数 a 和 b ，求它们的除法的商 a&#x2F;b ，要求不得使用乘号 ‘*’、除号 ‘&#x2F;‘ 以及求余符号 ‘%’ 。</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) &#x3D; 8 以及 truncate(-2.7335) &#x3D; -2</li><li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2 ^ 31，2 ^ 31 -1 ]。本题中，如果除法结果溢出，则返回 2^31 − 1</li></ul><blockquote><p>示例 1：<br>  输入：a &#x3D; 15, b &#x3D; 2<br>  输出：7<br>  解释：15&#x2F;2 &#x3D; truncate(7.5) &#x3D; 7<br>  示例 2：<br>  输入：a &#x3D; 7, b &#x3D; -3<br>  输出：-2<br>  解释：7&#x2F;-3 &#x3D; truncate(-2.33333..) &#x3D; -2<br>  示例 3：<br>  输入：a &#x3D; 0, b &#x3D; 1<br>  输出：0<br>  示例 4：<br>  输入：a &#x3D; 1, b &#x3D; 1<br>  输出：1</p></blockquote><ul><li>提示:</li><li>-2 ^ 31 &lt;&#x3D; a, b &lt;&#x3D; 2 ^ 31 - 1</li><li>b !&#x3D; 0<br> *&#x2F;</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目要求只能使用加减法，那我们自然想到用减法实现除法，用“被减数”能减去几次“减数”来衡量最后的结果，这时候我们想到求x的幂次的快速解法，将x成倍成倍的求幂，这里将减数成倍成倍的增大，次数对应也是成倍成倍的增大，例如：取a&#x3D;23，b&#x3D;2，b的变化如下:2-&gt;4-&gt;8-&gt;16,次数count的变化如下1-&gt;2-&gt;4-&gt;8,最后a-b&#x3D;23-16&#x3D;7，对7再执行一次上述过程，b:2-&gt;4,count:1-&gt;2,a-b&#x3D;3, 然后对3再执行一次，b:2,count:1,a-b&#x3D;1，1已经小于原b&#x3D;2，可以结束了，最后计数一下每轮的count是多少8+2+1&#x3D;11。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>为方便运算，我们需要将a，b都转为同正or同负，由于INT_MIN转正就越界了，我们只好都转负，这也是都转负的原因，有一种特殊情况 INT_MIN&#x2F;(-1)就overflow了 所以直接特殊处理最终结果的正负。</p><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-comment">//特殊情况直接处理</span><br>        <span class="hljs-keyword">if</span> (a == Integer.MIN_VALUE &amp;&amp; b == -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> Integer.MAX_VALUE;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> a;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 记录a,b取反标志，如只有一个取反，则最终结果也要取反</span><br>        <span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">0</span>) &#123;<br>            flag--;<br>            a = -a;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>            flag--;<br>            b = -b;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> calc(a, b);<br>        <span class="hljs-keyword">return</span> flag == <span class="hljs-number">1</span> ? -res : res;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 求a能减去b的次数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (a &lt;= b) &#123; <span class="hljs-comment">// a,b为负数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> b; <span class="hljs-comment">// 临时变量</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 记录a被减的次数，因为a&gt;b,所以a一定可以被b减一次</span><br>            <span class="hljs-keyword">while</span> (temp &gt;= Integer.MIN_VALUE &gt;&gt; <span class="hljs-number">1</span> &amp;&amp; a &lt;= temp &lt;&lt; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// temp应该大于等于最小值的二分之一，否则会导致溢出。a的绝对值应该比temp*2还小</span><br>                count += count; <span class="hljs-comment">// 可以减的次数翻倍</span><br>                temp += temp; <span class="hljs-comment">// 减数也翻倍</span><br>            &#125;<br>            res += count; <span class="hljs-comment">// 可以减的次数累加即为结果</span><br>            a -= temp; <span class="hljs-comment">// a减去当前temp，重新去和b求最大可以减的次数</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">divide</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-comment">//特殊情况直接处理</span><br>    <span class="hljs-keyword">if</span> a == math.MinInt32 &amp;&amp; b == <span class="hljs-number">-1</span> &#123;<br>        <span class="hljs-keyword">return</span> math.MaxInt32<br>    &#125;<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    flag := <span class="hljs-number">2</span> <span class="hljs-comment">// 记录a,b取反标志，如只有一个取反，则最终结果也要取反</span><br>    <span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">0</span> &#123;<br>        flag--<br>        a = -a<br>    &#125;<br>    <span class="hljs-keyword">if</span> b &gt; <span class="hljs-number">0</span> &#123;<br>        flag--<br>        b = -b<br>    &#125;<br>    res := calc(a, b)<br>    <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> -res<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-comment">// 求a能减去b的次数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calc</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    res := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> a &lt;= b &#123; <span class="hljs-comment">// a,b为负数</span><br>        temp := b <span class="hljs-comment">// 临时变量</span><br>        count := <span class="hljs-number">1</span> <span class="hljs-comment">// 记录a被减的次数，因为a&gt;b,所以a一定可以被b减一次</span><br>        <span class="hljs-keyword">for</span> temp &gt;= math.MinInt32/<span class="hljs-number">2</span> &amp;&amp; a &lt;= temp&lt;&lt;<span class="hljs-number">1</span> &#123; <span class="hljs-comment">// temp应该大于等于最小值的二分之一，否则会导致溢出。a的绝对值应该比temp*2还小</span><br>            count += count <span class="hljs-comment">// 可以减的次数翻倍</span><br>            temp += temp <span class="hljs-comment">// 减数也翻倍</span><br>        &#125;<br>        res += count <span class="hljs-comment">// 可以减的次数累加即为结果</span><br>        a -= temp <span class="hljs-comment">// a减去当前temp，重新去和b求最大可以减的次数</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>整数除法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My First Blog</title>
    <link href="/2023/07/13/hello-world/"/>
    <url>/2023/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
