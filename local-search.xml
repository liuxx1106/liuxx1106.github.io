<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode24. 两两交换链表中的节点</title>
    <link href="/2023/08/09/leetcode24/"/>
    <url>/2023/08/09/leetcode24/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">leetcode地址</a></p><ul><li>难度：中等</li><li>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。 。</li></ul><p>示例 1：</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/leetcode24-1.jpg" alt="示例1"></p><blockquote><p>输入：head &#x3D; [1,2,3,4]<br>   输出：[2,1,4,3]</p></blockquote><p>示例 2：</p><blockquote><p>输入：head &#x3D; []<br>输出：[]</p></blockquote><p>示例 3：</p><blockquote><p>输入：head &#x3D; [1]<br>输出：[1]</p></blockquote><p>提示:</p><ul><li>链表中节点的数目在范围 [0, 100] 内</li><li>0 &lt;&#x3D; Node.val &lt;&#x3D; 100</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>递归</li></ol><blockquote><p>每次操作交换两个节点，剩余节点进行递归直到head或者head.next为null;</p></blockquote><ol start="2"><li>迭代</li></ol><blockquote><p>我们的目标是每次取出两个节点，两两交换。因此我们可以定义虚拟头节点<code>dummy</code>,dummy.next &#x3D; head,<br>定义当前节点<code>curNode</code>,curNode &#x3D; dummy; 每次取出curNode的后n1,n2两个节点交换，然后重新赋值curNode &#x3D; n1,<br>直到curNode没有下一个节点，或者只有一个节点，则无需交换，至此结束；</p></blockquote><ol start="3"><li>栈</li></ol><blockquote><p>定义虚拟头节点p, 令head&#x3D;p, 根据栈后进先出的特性，每次压入curNode和curNode.next,<br>然后出栈依次加入p,剩余节点重复 此操作直到没有节点或只有一个节点时无需交换。<br>需注意，若是奇数个节点，则最后剩余一个节点需补在最后。<br>最后，返回head.next即可。</p></blockquote><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">//1. 递归</span><br>    <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">rest</span> <span class="hljs-operator">=</span> head.next.next; <span class="hljs-comment">// 剩余节点</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> head.next; <span class="hljs-comment">// 节点2为新的头节点</span><br>    newHead.next = head; <span class="hljs-comment">// 节点2指向节点1</span><br>    head.next = swapPairs(rest); <span class="hljs-comment">//节点1指向剩余节点</span><br>    <span class="hljs-keyword">return</span> newHead;<br>    <span class="hljs-comment">// 2. 迭代</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    dummy.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">curNode</span> <span class="hljs-operator">=</span> dummy;<br>    <span class="hljs-keyword">while</span>(curNode.next != <span class="hljs-literal">null</span> &amp;&amp; curNode.next.next != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> curNode.next;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> curNode.next.next;<br>        curNode.next = n2;<br>        n1.next = n2.next;<br>        n2.next = n1;<br>        curNode = n1;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummy.next;<br>    <span class="hljs-comment">// 3. 栈</span><br>    <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    Deque&lt;ListNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    head = p;<br>    <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span> &amp;&amp; cur.next != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(cur);<br>        stack.push(cur.next);<br>        cur = cur.next.next;<br>        p.next = stack.pop();<br>        p = p.next;<br>        p.next = stack.pop();<br>        p = p.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cur != <span class="hljs-literal">null</span>) &#123;<br>        p.next = cur;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        p.next = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head.next;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//1. 递归</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> ListNode <span class="hljs-keyword">struct</span> &#123;<br> Val  <span class="hljs-type">int</span><br> Next *ListNode<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swapPairs</span><span class="hljs-params">(head *ListNode)</span></span> *ListNode &#123;<br> <span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">return</span> head<br> &#125;<br> rest := head.Next.Next<br> newHead := head.Next<br> newHead.Next = head<br> head.Next = swapPairs(rest)<br> <span class="hljs-keyword">return</span> newHead<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> head := &amp;ListNode&#123;Val: <span class="hljs-number">1</span>&#125;<br> node2 := &amp;ListNode&#123;Val: <span class="hljs-number">2</span>&#125;<br> node3 := &amp;ListNode&#123;Val: <span class="hljs-number">3</span>&#125;<br> node4 := &amp;ListNode&#123;Val: <span class="hljs-number">4</span>&#125;<br> head.Next = node2<br> node2.Next = node3<br> node3.Next = node4<br><br> result := swapPairs(head)<br> <span class="hljs-keyword">for</span> result != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Print(result.Val, <span class="hljs-string">&quot; &quot;</span>)<br>  result = result.Next<br> &#125;<br>&#125;<br><br><span class="hljs-comment">//2.迭代</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> ListNode <span class="hljs-keyword">struct</span> &#123;<br> Val  <span class="hljs-type">int</span><br> Next *ListNode<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swapPairs</span><span class="hljs-params">(head *ListNode)</span></span> *ListNode &#123;<br> <span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">return</span> head<br> &#125;<br> p := &amp;ListNode&#123;Val: <span class="hljs-number">0</span>&#125;<br> p.Next = head<br> curNode := p<br> <span class="hljs-keyword">for</span> curNode.Next != <span class="hljs-literal">nil</span> &amp;&amp; curNode.Next.Next != <span class="hljs-literal">nil</span> &#123;<br>  n1 := curNode.Next<br>  n2 := curNode.Next.Next<br>  curNode.Next = n2<br>  n1.Next = n2.Next<br>  n2.Next = n1<br>  curNode = n1<br> &#125;<br> <span class="hljs-keyword">return</span> p.Next<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> head := &amp;ListNode&#123;Val: <span class="hljs-number">1</span>&#125;<br> node2 := &amp;ListNode&#123;Val: <span class="hljs-number">2</span>&#125;<br> node3 := &amp;ListNode&#123;Val: <span class="hljs-number">3</span>&#125;<br> node4 := &amp;ListNode&#123;Val: <span class="hljs-number">4</span>&#125;<br> head.Next = node2<br> node2.Next = node3<br> node3.Next = node4<br><br> result := swapPairs(head)<br> <span class="hljs-keyword">for</span> result != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Print(result.Val, <span class="hljs-string">&quot; &quot;</span>)<br>  result = result.Next<br> &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客搭建之图床的最佳实践</title>
    <link href="/2023/08/07/image-hosting/"/>
    <url>/2023/08/07/image-hosting/</url>
    
    <content type="html"><![CDATA[<h3 id="前言：为什么使用图床？"><a href="#前言：为什么使用图床？" class="headerlink" title="前言：为什么使用图床？"></a>前言：为什么使用图床？</h3><p>相较于冗长乏味的文字堆砌，读者往往更喜欢图文并茂、生动有趣的文章。因此好的图片往往能起到画龙点睛的作用。<br>我们知道，在hexo中（在一半web项目中也适用），添加图片一般有两种形式：</p><ul><li>存在项目public目录下</li><li>存在远程仓库</li></ul><p>当我们有大量的图片时，如果存在本地目录下，不仅造成项目臃肿，而且加载速度也不快，<br>所以，我们会考虑把图片存在远程服务器，也就是所说的图床。</p><h3 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h3><h4 id="方案一：Github仓库-Picgo-jsDelivr-CDN"><a href="#方案一：Github仓库-Picgo-jsDelivr-CDN" class="headerlink" title="方案一：Github仓库 + Picgo + jsDelivr CDN"></a>方案一：Github仓库 + Picgo + jsDelivr CDN</h4><p>由于最近国内将jsDelivrCDN给墙了，无法通过其对Github进行加速，这种方案目前暂时不可行，此处</p><p>介绍下具体操作即可：</p><ol><li><p>创建Github公共仓库，名字随便，注意一定要是公共的，否则别人无法访问到图片资源。</p></li><li><p>下载 Picgo</p></li></ol><blockquote><p>PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具</p></blockquote><ol start="3"><li>将Github创建仓库信息配置到Picgo中。打开Picgo，点击图床设置，选择Github图床，填写如下信息。</li></ol><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/image-hosting1.png" alt="picgo配置github"></p><p>仓库名写你之前创建好的仓库名</p><p>分支填现有的分支即可</p><p>其中的Token可以在Github - Settings - Personal access tokens 中生成，只选择repo选项就可以</p><p>自定义域名这里填写：<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%88%91%E4%BB%AC%E9%87%87%E7%94%A8%E4%BA%86jsDelivr">https://cdn.jsdelivr.net/gh/用户名/仓库名，因为我们采用了jsDelivr</a> CDN进行加速（目前用不了）</p><p>最后保存为默认图床即可</p><h4 id="方案二：阿里云对象存储-Picgo"><a href="#方案二：阿里云对象存储-Picgo" class="headerlink" title="方案二：阿里云对象存储 + Picgo"></a>方案二：阿里云对象存储 + Picgo</h4><p>谈到云服务器首先想到的就是阿里云了，目前阿里云是国内最好的云上服务解决方案提供商。</p><p>我们的项目中接触和应用和比较多，那么今天我们就先来实践下阿里云对象存储oss</p><ol><li>登录阿里云网站-&gt;进入工作台页面-&gt;搜索对象存储-&gt;点击立即开通-&gt;管理控制台-&gt;bucket列表</li></ol><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/image-hosting2.png" alt="picgo配置aliyunoss1"></p><ol start="2"><li>进入页面，点击创建bucket.</li></ol><ul><li>Bucket名称和地域必填。地域选择一个距离自己近一些的地方。</li><li>读写权限选择为公共读，其余均默认</li></ul><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/image-hosting3.png" alt="picgo配置aliyunoss2"></p><p>点击网页右上角的头像，再点击AccessKey管理，进入该页面<br>点击创建AccessKey，将创建号的key复制保存下来，之后在Picgo上需要用到</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/image-hosting4.png" alt="picgo配置aliyunoss3"></p><ol start="3"><li>打开Picgo，点击图床设置，选择阿里云OSS，填写如下信息。</li></ol><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/image-hosting5.png" alt="picgo配置aliyunoss4"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>结合个人喜好和使用经验，我还是更推荐方案三作为我们图床实践的最佳选择</p><p>就算后期图片访问量变大，也仅需要充一点钱，大概一年40GB只需要9块钱，非常划算。</p><h3 id="结合Typora使用"><a href="#结合Typora使用" class="headerlink" title="结合Typora使用"></a>结合Typora使用</h3><p>当我们成功搭建好图床之后，每次写Markdown文档时，都需要先截图，再保存，然后手动打开Picgo完成上传，最后将图片地址复制到Markdown文档中。</p><p>如何做到更加高效地上传图片到图床呢？</p><p>用Typora写笔记，只需要先截图，再粘贴到Markdown文档，即可直接跳过上传操作，Typora帮我们自动完成。</p><p>操作：打开Typora的设置，点击图像，进行如下设置</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/image-hosting6.png" alt="picgo配置aliyunoss5"></p><p>自此，便可以方便快捷地用Hexo写图文并茂的博客啦~</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图床</tag>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer II 047. 二叉树剪枝</title>
    <link href="/2023/07/31/algorithm-offer7/"/>
    <url>/2023/07/31/algorithm-offer7/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/pOCWxh/description/?envType=study-plan-v2&envId=coding-interviews-special">leetcode地址</a><br>给定一个二叉树 根节点 root ，树的每个节点的值要么是 0，要么是 1。请剪除该二叉树中所有节点的值为 0 的子树。<br>节点 node 的子树为 node 本身，以及所有 node 的后代。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><blockquote><p>输入: [1,null,0,0,1]<br>输出: [1,null,0,null,1]<br>解释:<br>只有红色节点满足条件“所有不包含 1 的子树”。<br>右图为返回的答案。<br><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/offer7-1.png" alt="示例1"></p></blockquote><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><blockquote><p>输入: [1,0,1,0,0,0,1]<br>输出: [1,null,1,null,1]<br>解释:<br><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/offer7-2.png" alt="示例2"></p></blockquote><h4 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h4><blockquote><p>输入: [1,1,0,1,1,0,1,0]<br>输出: [1,1,0,1,1,null,1]<br>解释:<br><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/offer7-3.png" alt="示例3"></p></blockquote><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><ul><li>二叉树的节点个数的范围是 [1,200]</li><li>二叉树节点的值只会是 0 或 1</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据题意和示例，我们可以比较清晰地找到剪枝的条件有两个：</p><ul><li><ol><li>node.val &#x3D;&#x3D; 0;</li></ol></li><li><ol start="2"><li>node.left &#x3D;&#x3D; null &amp;&amp; node.right &#x3D;&#x3D; null</li></ol></li></ul><p>因此，我们可以利用深度优先搜索遍历节点的子节点，递归，即可得到最终答案。</p><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">pruneTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> dfs(root);<br>    &#125;<br><br>    TreeNode <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>        node.left = dfs(node.left);<br>        node.right = dfs(node.right);<br>        <span class="hljs-keyword">if</span>(node.val == <span class="hljs-number">0</span> &amp;&amp; node.left == <span class="hljs-literal">null</span> &amp;&amp; node.right == <span class="hljs-literal">null</span>) &#123;<br>            node = <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pruneTree</span><span class="hljs-params">(root *TreeNode)</span></span> *TreeNode &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> root<br>    &#125;<br>    root.Left = pruneTree(root.Left)<br>    root.Right = pruneTree(root.Right)<br>    <span class="hljs-keyword">if</span> root.Val == <span class="hljs-number">0</span> &amp;&amp; root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br>        root = <span class="hljs-literal">nil</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>二叉树</tag>
      
      <tag>深度优先搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL空间数据操作及MyBatisPlus接入</title>
    <link href="/2023/07/26/mysql-geometry/"/>
    <url>/2023/07/26/mysql-geometry/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近接手同事做了一半的项目，其中有个需求是元数据入库需要存储空间数据，支持空间查询。<br>当前项目后台使用的是<code>SpringBoot</code> + <code>MyBatisPlus</code> + <code>MySQL</code>, 前端使用的是vue2。<br>由于之前做空间数据都是使用的<code>PostgreSql</code>, 它有着强大空间数据处理能力，且项目中使用也很方便。<br>潜意识里认为<code>MySQL</code>不支持空间数据，没想到一查资料居然是支持的，于是开始了连续几个小时的踩坑，终于搞定，整理成完成路线供大家参考。</p><h3 id="1-MySQL空间数据"><a href="#1-MySQL空间数据" class="headerlink" title="1. MySQL空间数据"></a>1. MySQL空间数据</h3><p>MySQL为空间数据存储及处理提供了专用的类型geometry(支持所有的空间结构)，还有有细分类型Point, LineString,<br>Polygon, MultiPoint, MultiLineString, MultiPolygon等等，同时提供了大量的空间函数支持空间运算和查询。</p><h3 id="2-GeoJson介绍"><a href="#2-GeoJson介绍" class="headerlink" title="2. GeoJson介绍"></a>2. GeoJson介绍</h3><p>GeoJSON是一种对各种地理数据结构进行编码的格式。GeoJSON对象可以表示几何、特征或者特征集合。GeoJSON支持下面几何类型：</p><p>点、线、面、多点、多线、多面和几何集合。</p><p>GeoJSON里的特征包含一个几何对象和其他属性，特征集合表示一系列特征，一个完整的GeoJSON数据结构总是一个（JSON术语里的）对象。<br>以下为常见示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;FeatureCollection&quot;</span>,<br>    <span class="hljs-string">&quot;features&quot;</span>: [&#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Feature&quot;</span>,<br>            <span class="hljs-string">&quot;geometry&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Point&quot;</span>,<br>                <span class="hljs-string">&quot;coordinates&quot;</span>: [<span class="hljs-number">102.0</span>, <span class="hljs-number">0.5</span>]<br>            &#125;,<br>            <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;prop0&quot;</span>: <span class="hljs-string">&quot;value0&quot;</span><br>            &#125;<br>        &#125;, &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Feature&quot;</span>,<br>            <span class="hljs-string">&quot;geometry&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;LineString&quot;</span>,<br>                <span class="hljs-string">&quot;coordinates&quot;</span>: [[<span class="hljs-number">102.0</span>, <span class="hljs-number">0.0</span>], [<span class="hljs-number">103.0</span>, <span class="hljs-number">1.0</span>], [<span class="hljs-number">104.0</span>, <span class="hljs-number">0.0</span>], [<span class="hljs-number">105.0</span>, <span class="hljs-number">1.0</span>]]<br>            &#125;,<br>            <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;prop0&quot;</span>: <span class="hljs-string">&quot;value0&quot;</span>,<br>                <span class="hljs-string">&quot;prop1&quot;</span>: <span class="hljs-number">0.0</span><br>            &#125;<br>        &#125;, &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Feature&quot;</span>,<br>            <span class="hljs-string">&quot;geometry&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Polygon&quot;</span>,<br>                <span class="hljs-string">&quot;coordinates&quot;</span>: [[<span class="hljs-number">100.0</span>, <span class="hljs-number">0.0</span>], [<span class="hljs-number">101.0</span>, <span class="hljs-number">0.0</span>], [<span class="hljs-number">101.0</span>, <span class="hljs-number">1.0</span>], [<span class="hljs-number">100.0</span>, <span class="hljs-number">1.0</span>], [<span class="hljs-number">100.0</span>, <span class="hljs-number">0.0</span>]]<br>            &#125;,<br>            <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;prop0&quot;</span>: <span class="hljs-string">&quot;value0&quot;</span>,<br>                <span class="hljs-string">&quot;prop1&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;this&quot;</span>: <span class="hljs-string">&quot;that&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-MySql格式化空间数据类型（geometry相互转换geojson）"><a href="#3-MySql格式化空间数据类型（geometry相互转换geojson）" class="headerlink" title="3.MySql格式化空间数据类型（geometry相互转换geojson）"></a>3.MySql格式化空间数据类型（geometry相互转换geojson）</h3><p>MySQL提供了几个空间函数用来解析及格式化空间数据，geojson是gis空间数据展示的标准格式，前端地图框架及后端空间分析相关框架都会支持geojson格式。</p><table><thead><tr><th>转换</th><th>空间函数</th></tr></thead><tbody><tr><td>geojson -&gt; geometry</td><td>ST_GeomFromGeoJSON</td></tr><tr><td>geometry -&gt; geojson</td><td>ST_ASGEOJSON</td></tr><tr><td>geometry(字符串) -&gt; geometry</td><td>ST_GEOMFROMTEXT</td></tr></tbody></table><ul><li>eg1. 查询示例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id,point_name,ST_ASGEOJSON(point_geom) as geojson from meteorological_point where id = 1<br></code></pre></td></tr></table></figure><ul><li>eg2. 新增示例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into meteorological_point(point_name, point_geom) values(&quot;新帅集团监测点&quot;, ST_GEOMFROMTEXT(&quot;POINT(117.420671499 40.194914201)&quot;))<br></code></pre></td></tr></table></figure><h3 id="4-SpringBoot-MyBatisPlus-MySQL-集成空间数据实战"><a href="#4-SpringBoot-MyBatisPlus-MySQL-集成空间数据实战" class="headerlink" title="4. SpringBoot + MyBatisPlus + MySQL 集成空间数据实战"></a>4. SpringBoot + MyBatisPlus + MySQL 集成空间数据实战</h3><p>在我们的Java项目中操作空间数据一般有两种方式：</p><ul><li>使用上面的<code>ST_ASGEOJSON</code>,<code>ST_GEOMFROMTEXT</code>等方法用原生sql直接操作数据；</li><li>使用MyBatisPlus中的typeHandler在切面层做类型转换；</li></ul><p>因为我们的项目已经集成了MyBatisPlus且集成度较高，而且切面处理更为优雅便捷，所以这里使用第二种。</p><h4 id="4-1-实现GeometryTypeHandler-class工具类"><a href="#4-1-实现GeometryTypeHandler-class工具类" class="headerlink" title="4.1 实现GeometryTypeHandler.class工具类"></a>4.1 实现GeometryTypeHandler.class工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.jeecg.config.mybatis;<br><br><span class="hljs-keyword">import</span> com.vividsolutions.jts.geom.Geometry;<br><span class="hljs-keyword">import</span> com.vividsolutions.jts.geom.GeometryFactory;<br><span class="hljs-keyword">import</span> com.vividsolutions.jts.geom.PrecisionModel;<br><span class="hljs-keyword">import</span> com.vividsolutions.jts.io.*;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.MappedTypes;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.CallableStatement;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-meta">@MappedTypes(&#123;String.class&#125;)</span><br><span class="hljs-meta">@MappedJdbcTypes(&#123;JdbcType.OTHER&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GeometryTypeHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTypeHandler</span>&lt;String&gt; &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement preparedStatement, <span class="hljs-type">int</span> i, String s, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br><br>        <span class="hljs-type">Geometry</span> <span class="hljs-variable">geo</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//String转Geometry</span><br>            geo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WKTReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GeometryFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrecisionModel</span>())).read(s);<br>            <span class="hljs-comment">// Geometry转WKB</span><br>            <span class="hljs-type">byte</span>[] geometryBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WKBWriter</span>(<span class="hljs-number">2</span>, ByteOrderValues.LITTLE_ENDIAN, <span class="hljs-literal">false</span>).write(geo);<br>            <span class="hljs-comment">// 设置SRID为mysql默认的 0</span><br>            <span class="hljs-type">byte</span>[] wkb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[geometryBytes.length+<span class="hljs-number">4</span>];<br>            wkb[<span class="hljs-number">0</span>] = wkb[<span class="hljs-number">1</span>] = wkb[<span class="hljs-number">2</span>] = wkb[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>            System.arraycopy(geometryBytes, <span class="hljs-number">0</span>, wkb, <span class="hljs-number">4</span>, geometryBytes.length);<br>            preparedStatement.setBytes(i,wkb);<br>        &#125;<span class="hljs-keyword">catch</span> (ParseException e)&#123;<br><br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet resultSet, String s)</span>&#123;<br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> resultSet.getBinaryStream(s))&#123;<br>            <span class="hljs-type">Geometry</span> <span class="hljs-variable">geo</span> <span class="hljs-operator">=</span> getGeometryFromInputStream(inputStream);<br>            <span class="hljs-keyword">if</span>(geo != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> geo.toString();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet resultSet, <span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> resultSet.getBinaryStream(i))&#123;<br>            <span class="hljs-type">Geometry</span> <span class="hljs-variable">geo</span> <span class="hljs-operator">=</span> getGeometryFromInputStream(inputStream);<br>            <span class="hljs-keyword">if</span>(geo != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> geo.toString();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(CallableStatement callableStatement, <span class="hljs-type">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 流 转 geometry</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">private</span>  Geometry <span class="hljs-title function_">getGeometryFromInputStream</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Geometry</span> <span class="hljs-variable">dbGeometry</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 二进制流转成字节数组</span><br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">255</span>];<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">bytesRead</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-keyword">while</span> ((bytesRead = inputStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                baos.write(buffer, <span class="hljs-number">0</span>, bytesRead);<br>            &#125;<br>            <span class="hljs-comment">// 得到字节数组</span><br>            <span class="hljs-type">byte</span>[] geometryAsBytes = baos.toByteArray();<br>            <span class="hljs-comment">// 字节数组小于5 异常</span><br>            <span class="hljs-keyword">if</span> (geometryAsBytes.length &lt; <span class="hljs-number">5</span>) &#123;<br><br>            &#125;<br><br>            <span class="hljs-comment">//字节数组前4个字节表示srid 去掉</span><br>            <span class="hljs-type">byte</span>[] sridBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<br>            System.arraycopy(geometryAsBytes, <span class="hljs-number">0</span>, sridBytes, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">bigEndian</span> <span class="hljs-operator">=</span> (geometryAsBytes[<span class="hljs-number">4</span>] == <span class="hljs-number">0x00</span>);<br>            <span class="hljs-comment">// 解析srid</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">srid</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (bigEndian) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sridBytes.length; i++) &#123;<br>                    srid = (srid &lt;&lt; <span class="hljs-number">8</span>) + (sridBytes[i] &amp; <span class="hljs-number">0xff</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sridBytes.length; i++) &#123;<br>                    srid += (sridBytes[i] &amp; <span class="hljs-number">0xff</span>) &lt;&lt; (<span class="hljs-number">8</span> * i);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-type">WKBReader</span> <span class="hljs-variable">wkbReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WKBReader</span>();<br>            <span class="hljs-comment">// WKBReader 把字节数组转成geometry对象。</span><br>            <span class="hljs-type">byte</span>[] wkb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[geometryAsBytes.length - <span class="hljs-number">4</span>];<br>            System.arraycopy(geometryAsBytes, <span class="hljs-number">4</span>, wkb, <span class="hljs-number">0</span>, wkb.length);<br>            dbGeometry = wkbReader.read(wkb);<br>            dbGeometry.setSRID(srid);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dbGeometry;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-实体类字段上加类型转换注解"><a href="#4-2-实体类字段上加类型转换注解" class="headerlink" title="4.2 实体类字段上加类型转换注解"></a>4.2 实体类字段上加类型转换注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModelProperty(value = &quot;空间点位&quot;)</span><br><span class="hljs-meta">@TableField(typeHandler = GeometryTypeHandler.class)</span><br><span class="hljs-keyword">private</span> String geomPoint;<br></code></pre></td></tr></table></figure><p>此处有坑，还需在实体类加<code>autoResultMap = true</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableName(value = &quot;f_metadata&quot;,autoResultMap = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Metadata</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JeecgEntity</span> &#123;<br>    <span class="hljs-comment">//省略</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于能查到的资料很有限，这里卡了半天，中间还尝试了MySQL方言 + Geometry格式化注解的方式,失败了<br>database-platform: org.hibernatespatial.mysql.MySQLSpatialDialect<br>@JsonSerialize(using &#x3D; GeometrySerializer.class)<br>@JsonDeserialize(using &#x3D; GeometryDeserializer.class)<br>此方法在postgresql中可用</p></blockquote><p>至此，我们的后台服务已经可以支持基本的增加、分页查询操作，空间数据可以完成自动转换。</p><h4 id="4-3-MyBatisPlus的QueryWrapper构造空间查询"><a href="#4-3-MyBatisPlus的QueryWrapper构造空间查询" class="headerlink" title="4.3 MyBatisPlus的QueryWrapper构造空间查询"></a>4.3 MyBatisPlus的QueryWrapper构造空间查询</h4><p>我们在项目开发中除了基本的分页查询，还要用到区域检索，而前面提到MySQL提供了大量的空间函数去支持空间查询。<br>比如：</p><ul><li>MBRContains(A,B) –&gt; A包含B</li><li>MBRWithin(A,B) –&gt; A在B中</li></ul><p><em>文末附MySQL空间处理函数和方法</em></p><p>所以，我们可以利用相关函数去做区域查询，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">select * from f_metadata where <span class="hljs-title function_">MBRContains</span><span class="hljs-params">(ST_GeomFromText(<span class="hljs-string">&#x27;Polygon((89.76 41.31,125.36 44.56,117.07 23.29,92.33 23.39,89.76 41.31))&#x27;</span>)</span>,geom_point)<br></code></pre></td></tr></table></figure><p>该sql语句可以检索到geom_point在此闭合区域内的所有数据。</p><p>现在我们需要考虑下QueryWrapper有没有MBRContains方法，查了下果然没有，那么怎么用QueryWrapper来构造空间查询呢？</p><blockquote><p>通过查看QueryWrapper的所有内部方法，我发现了exist函数：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">default</span> Children <span class="hljs-title function_">exists</span><span class="hljs-params">(String existsSql)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.exists(<span class="hljs-literal">true</span>, existsSql);<br>&#125;<br></code></pre></td></tr></table></figure><p>它可以传入原生sql语句，然后先执行外层查询，再用结果去匹配是否存在于exists内，如果为true，则作为结果返回。<br>先在数据库写了下，没问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">select * from f_metadata where <span class="hljs-title function_">EXISTS</span><span class="hljs-params">(select* from (select * from f_metadata where Contains(ST_GeomFromText(<span class="hljs-string">&#x27;Polygon((89.76 41.31,125.36 44.56,117.07 23.29,92.33 23.39,89.76 41.31))&#x27;</span>)</span>,geom_point)) as b where f_metadata.id = b.id  );<br></code></pre></td></tr></table></figure><p>后台代码中的QueryWrapper构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ......</span><br><span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(metadata.getGeomPoint())) &#123;<br>        queryWrapper.exists(<span class="hljs-string">&quot;select * from (select * from f_metadata where Contains(ST_GeomFromText(&#x27;&quot;</span> + metadata.getGeomPoint() + <span class="hljs-string">&quot;&#x27;),geom_point)) as b where f_metadata.id = b.id&quot;</span>);<br>&#125;<br>queryWrapper.lambda().between(ObjectUtil.isNotEmpty(metadata.getStartTime()) &amp;&amp; ObjectUtil.isNotEmpty(metadata.getEndTime()), Metadata::getCreateTime, metadata.getStartTime(), metadata.getEndTime());<br>queryWrapper.lambda().orderByDesc(Metadata::getCreateTime);<br><span class="hljs-keyword">return</span> queryWrapper;<br></code></pre></td></tr></table></figure><p>搞定！</p><h3 id="5-附：MySQL空间数据处理函数和方法"><a href="#5-附：MySQL空间数据处理函数和方法" class="headerlink" title="5. 附：MySQL空间数据处理函数和方法"></a>5. 附：MySQL空间数据处理函数和方法</h3><h4 id="空间查询函数"><a href="#空间查询函数" class="headerlink" title="空间查询函数"></a>空间查询函数</h4><ul><li><p>包含相关<br>MBRContains(A,B) –&gt; A包含B<br>MBRWithin(A,B) –&gt; A在B中<br>注意:包含关系中，所要验证的集合必须全部包含在指定的集合中。如果只有部分在其中，应该使用相交</p></li><li><p>覆盖相关<br>MBRCoveredBy(A,B) –&gt; A被B覆盖<br>MBRCovers(A,B) –&gt; A覆盖B</p></li><li><p>相交相关<br>MBRDisjoint(A,B) –&gt; A、B不相交<br>MBRIntersects(A,B) –&gt; A、B相交</p></li><li><p>接触<br>MBRTouches(A,B) –&gt; A、B接触，接触的概念类似于相切</p></li><li><p>重叠<br>MBROverlaps(A,B) –&gt; A、B重叠</p></li><li><p>相同<br>MBREquals(A,B) –&gt; A、B相同</p></li></ul><h4 id="空间数据相关方法"><a href="#空间数据相关方法" class="headerlink" title="空间数据相关方法"></a>空间数据相关方法</h4><ul><li><p>点独有<br>开始、结束点<br>ST_StartPoint(A)<br>ST_EndPoint(A)</p></li><li><p>获取x或y<br>ST_X(A)<br>ST_Y(A)</p></li><li><p>凸包<br>ST_ConvexHull(A) –&gt; 多点A的凸包面</p></li><li><p>返回矩形<br>ST_MakeEnvelope(A,B) –&gt; A、B为对角点</p></li><li><p>线独有</p><ul><li>线是否闭合<br>ST_IsClosed(A)</li><li>线中点数量<br>ST_NumPoints</li><li>线中第n个点<br>ST_PointN(A,n)</li><li>线长度<br>ST_Length(A)</li><li>生成矩形<br>ST_Envelope(A) –&gt; A只有两个点，且不是水平或竖直线</li></ul></li><li><p>面积<br>  ST_Area(A)</p><ul><li>面的内外边界<br>ST_ExteriorRing(A) –&gt; 获取A面外环边界，返回值为LineString<br>ST_InteriorRingN(A,num) –&gt; 获取A面中第num个内环边界，返回值为LineString。num从1开始。<br>ST_NumInteriorRings(A) –&gt; 获取A面内环数量(5.7.8后添加ST_NumInteriorRing，效果一样)<br>部分geo对象可用</li></ul></li><li><p>集合</p><ul><li>交集<br>ST_Intersection(A,B)</li><li>异或<br>ST_SymDifference(A,B) –&gt; A、B中独有的</li><li>并集<br>ST_Union(A,B)</li><li>质心<br>ST_Centroid(A)</li><li>距离<br>ST_Distance(A,B) –&gt; A和B距离<br>ST_Distance_Sphere(A,B) –&gt; A和B的球面距离</li><li>不同<br>ST_Difference(A,B) –&gt; 返回A中有B中没有的</li><li>抽稀<br>ST_Simplify(A,mix_distance) –&gt; 将A抽稀，简化A中两点距离小于max的值(用起来有点迷。。待研究)</li></ul></li><li><p>缓冲区<br>ST_Buffer(A,length) –&gt; 通过A几何体，生成他周边范围为length距离的面</p></li></ul><p>5.7.7后可以添加策略影响缓冲区的计算,设置的语句是ST_Buffer_Strategy()</p><ul><li><p>point策略<br>point_circle –&gt; 点的缓冲区是一个圆(默认)<br>point_square –&gt; 点的缓冲区是一个正方形，length是点到其中一边的距离</p></li><li><p>join策略<br>join_round –&gt; 连接处缓冲区边界为圆弧(默认)<br>join_miter –&gt; 连接处缓冲区边界为尖角</p></li><li><p>end策略<br>end_round –&gt; 在结束处缓冲区为圆弧(默认)<br>end_flat –&gt; 在结束处缓冲区为平坦的直线</p></li><li><p>举例生成缓冲区<br>ST_Buffer(point, 5, ST_Buffer_Strategy(‘point_square’))<br>ST_Buffer(line, 5, ST_Buffer_Strategy(‘join_miter’, 10), ST_Buffer_Strategy(‘end_flat’))</p></li><li><p>相交<br>ST_Intersects(A,B) –&gt; A和B是否相交<br>ST_Crosses(A,B) –&gt; A和B是否相交(相交部分不等于A或B)<br>ST_Disjoint(A,B) –&gt; A和B是否不相交</p></li><li><p>重叠<br>ST_Overlaps(A,B)</p></li><li><p>接触<br>ST_Touches(A,B)</p></li><li><p>包含<br>ST_Contains(A,B) –&gt; A是否包含B<br>ST_Within(A,B) –&gt; A是否在B中</p></li><li><p>验证数据是否合法<br>ST_IsValid(A)<br>ST_Validate(A)</p></li><li><p>geo对象返回格式<br>ST_AsText(字段名) –&gt; 以文本形式返回<br>ST_AsBinary(字段名) –&gt; 以二进制形式返回</p></li></ul><p><em>注意:每个方法前的MBR、ST可要可不要，在mysql5.7.6之后，不带MBR、ST的方法开始弃用</em></p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatisplus</tag>
      
      <tag>mysql</tag>
      
      <tag>geometry</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer II 046. 二叉树的右侧视图</title>
    <link href="/2023/07/24/algorithm-offer6/"/>
    <url>/2023/07/24/algorithm-offer6/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/WNC0Lk/description/?envType=study-plan-v2&envId=coding-interviews-special">leetcode地址</a><br>给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/offer6-1.png" alt="示例1"></p><blockquote><p>输入: [1,2,3,null,5,null,4]<br>输出: [1,3,4]</p></blockquote><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><blockquote><p>输入: [1,null,3]<br>输出: [1,3]</p></blockquote><h4 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h4><blockquote><p>输入: []<br>输出: []</p></blockquote><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><ul><li>二叉树的节点个数的范围是 [0,100]</li><li>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li><code>DFS</code>深度优先搜索，看到该题目，我们的首先想到的应该是dfs, 步骤：<ul><li>从根节点一直沿着右侧节点遍历，最右侧节点全部为待返回的值，直接加入结果即可，记录层高deep；</li><li>遍历左边节点，如果curDeep &gt; deep,且node.right有值，则为右侧元素加入结果；</li><li>递归；</li></ul></li></ul><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/offer6-2.png" alt="深度优先搜索图解"></p><p>执行过程：</p><p>（1） 第一轮右侧直接遍历到最底，找到1，3，6，此时deep等于2（从0开始的）<br>（2） 第二轮从2开始遍历，由于2、4，层高均不大于deep,跳过<br>（3） 第三轮从5开始，找到8，此时deep&#x3D;3<br>（4） 第四轮找到9,结束。结果为1，3，6，8，9</p><ul><li><code>BFS</code>没电了，待补充, 步骤：<ul><li>；</li><li>；</li><li>；</li></ul></li></ul><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> deep;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">rightSideView</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        deep = -<span class="hljs-number">1</span>;<br>        dfs(root,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode node, <span class="hljs-type">int</span> curDeep)</span> &#123;<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(curDeep &gt; deep) &#123;<br>            deep = curDeep;<br>            res.add(node.val);<br>        &#125;<br>        dfs(node.right,curDeep + <span class="hljs-number">1</span>);<br>        dfs(node.left, curDeep + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rightSideView</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br>    res := []<span class="hljs-type">int</span>&#123;&#125;<br>    <span class="hljs-keyword">var</span> deep <span class="hljs-type">int</span> = <span class="hljs-number">-1</span><br>    dfs(root, <span class="hljs-number">0</span>, &amp;deep, &amp;res)<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dfs</span><span class="hljs-params">(node *TreeNode, curDeep <span class="hljs-type">int</span>, deep *<span class="hljs-type">int</span>, res *[]<span class="hljs-type">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> curDeep &gt; *deep &#123;<br>        *deep = curDeep<br>        *res = <span class="hljs-built_in">append</span>(*res, node.Val)<br>    &#125;<br>    dfs(node.Right, curDeep+<span class="hljs-number">1</span>, deep, res)<br>    dfs(node.Left, curDeep+<span class="hljs-number">1</span>, deep, res)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>二叉树</tag>
      
      <tag>深度优先搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis相关知识</title>
    <link href="/2023/07/18/redis/"/>
    <url>/2023/07/18/redis/</url>
    
    <content type="html"><![CDATA[<h2 id="redis相关知识总结"><a href="#redis相关知识总结" class="headerlink" title="redis相关知识总结"></a>redis相关知识总结</h2><h3 id="1、什么是redis"><a href="#1、什么是redis" class="headerlink" title="1、什么是redis?"></a>1、什么是redis?</h3><p>Redis是一个高性能的key-value型数据库，开源免费，是为了解决高并发、高扩展，大数据存储等一系列的问题而产生的数据库解决方案，是一个非关系型的数据库。</p><p>Redis 是一种基于内存的数据库，对数据的读写操作都是在内存中完成，因此读写速度非常快，常用于缓存，消息队列、分布式锁等场景。</p><p>Redis 提供了多种数据类型来支持不同的业务场景，比如:</p><ul><li><p>字符串（String）：最基本的数据结构，可以存储字符串、整数或浮点数。</p></li><li><p>列表（List）：有序的字符串列表，可以在列表的头部或尾部插入、删除元素，还可以根据索引获取元素。</p></li><li><p>哈希（Hash）：键值对的无序散列表，适用于存储对象。</p></li><li><p>集合（Set）：无序的字符串集合，可以添加、删除和判断元素是否存在。</p></li><li><p>有序集合（Sorted Set）：有序的字符串集合，每个元素都关联着一个分数，可以根据分数进行排序。</p></li><li><p>位图（Bitmap）：可以进行位级别的操作，适用于存储和处理二进制数据。</p></li><li><p>HyperLogLog：用于基数统计的数据结构，可以估计集合中的唯一元素数量。</p></li><li><p>地理空间索引（Geospatial Index）：用于存储和查询地理位置信息的数据结构。</p></li></ul><p>这些数据结构可以通过Redis提供的命令进行操作和管理，每种数据结构都有对应的命令集合。选择合适的数据结构可以更高效地存储和处理数据，适应不同的应用场景。</p><p>除此之外，Redis 还支持事务 、持久化、Lua 脚本、多种集群方案（主从复制模式、哨兵模式、切片机群模式）、发布&#x2F;订阅模式，内存淘汰机制、过期删除机制等等。</p><h3 id="2-redis为什么快？"><a href="#2-redis为什么快？" class="headerlink" title="2. redis为什么快？"></a>2. redis为什么快？</h3><p>官方使用基准测试的结果是，单线程的 Redis 吞吐量可以达到 10W&#x2F;每秒</p><p>之所以 Redis 采用单线程（网络 I&#x2F;O 和执行命令）那么快，有如下几个原因：</p><ul><li>Redis 的大部分操作都在内存中完成，并且采用了高效的数据结构，因此 Redis 瓶颈可能是机器的内存或者网络带宽，而并非 CPU，既然 CPU 不是瓶颈，那么自然就采用单线程的解决方案了；</li><li>Redis 采用单线程模型可以避免了多线程之间的竞争，省去了多线程切换带来的时间和性能上的开销，而且也不会导致死锁问题。</li><li>Redis 采用了 I&#x2F;O 多路复用机制处理大量的客户端 Socket 请求，IO 多路复用机制是指一个线程处理多个 IO 流，就是我们经常听到的 select&#x2F;epoll 机制。简单来说，在 Redis 只运行单线程的情况下，该机制允许内核中，同时存在多个监听 Socket 和已连接 Socket。内核会一直监听这些 Socket 上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流的效果。</li></ul><h3 id="3-redis的缺点"><a href="#3-redis的缺点" class="headerlink" title="3. redis的缺点"></a>3. redis的缺点</h3><p>Redis的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</p><h3 id="4-redis适用于的场景"><a href="#4-redis适用于的场景" class="headerlink" title="4. redis适用于的场景?"></a>4. redis适用于的场景?</h3><p>Redis最适合所有数据in-momory的场景，如：</p><ul><li>4.1 会话缓存（Session Cache）</li></ul><p>最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。</p><ul><li>4.2 全页缓存（FPC）</li></ul><p>除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。</p><ul><li>4.3 队列</li></ul><p>Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push&#x2F;pop 操作。</p><p>如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。</p><ul><li>4.4 排行榜&#x2F;计数器</li></ul><p>Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：</p><p>当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：</p><p>ZRANGE user_scores 0 10 WITHSCORES</p><p>Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。</p><ul><li>4.5 发布&#x2F;订阅</li></ul><p>最后（但肯定不是最不重要的）是Redis的发布&#x2F;订阅功能。发布&#x2F;订阅的使用场景确实非常多。</p><h3 id="5-Redis如何做持久化的？"><a href="#5-Redis如何做持久化的？" class="headerlink" title="5. Redis如何做持久化的？"></a>5. Redis如何做持久化的？</h3><p>Redis 的读写操作都是在内存中，当 Redis 重启后，内存中的数据就会丢失，为了保证内存中的数据不会丢失，Redis 实现了数据持久化的机制，将数据存储到磁盘，Redis 重启能够从磁盘中恢复原有的数据。</p><ul><li><em>Redis 共有两种数据持久化的方式：</em></li></ul><p>AOF 日志：每执行一条写操作命令，就把该命令以追加的方式写入到一个文件里；<br>RDB 快照：将某一时刻的内存数据，以二进制的方式写入磁盘；</p><p><code>RDB快照</code>做镜像全量持久化，aof做增量持久化。因为<code>RDB快照</code>会耗费较长时间，不够实时，在停机的时候会导致大量丢失数据，所以需要aof来配合使用。在redis实例重启时，会使用<code>RDB快照</code>持久化文件重新构建内存，再使用aof重放近期的操作指令来实现完整恢复重启之前的状态。</p><ul><li><em>如果突然机器掉电会怎样?</em></li></ul><p>取决于aof日志sync属性的配置，如果不要求性能，在每条写指令时都sync一下磁盘，就不会丢失数据。但是在高性能的要求下每次都sync是不现实的，一般都使用定时sync，比如1s1次，这个时候最多就会丢失1s的数据。</p><ul><li><em>bgsave的原理是什么？</em></li></ul><p>fork和cow。fork是指redis通过创建子进程来进行bgsave操作，cow指的是copy on write，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。</p><h3 id="6-redis缓存穿透、缓存击穿、缓存雪崩是什么？怎么解决？"><a href="#6-redis缓存穿透、缓存击穿、缓存雪崩是什么？怎么解决？" class="headerlink" title="6. redis缓存穿透、缓存击穿、缓存雪崩是什么？怎么解决？"></a>6. redis缓存穿透、缓存击穿、缓存雪崩是什么？怎么解决？</h3><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>当大量缓存数据在同一时间过期或者 Redis 故障宕机时，如果此时有大量的用户请求，都无法在 Redis 中处理，于是全部请求都直接访问数据库，从而导致数据库的压力增加，严重的会造成数据库宕机，从而形成一系列连锁反应，造成整个系统崩溃。</p><p>解决方法</p><ul><li>大量数据同时过期</li></ul><ol><li>均匀设置过期时间：避免将大量的数据设置成同一个过期时间。<br>互斥锁：当业务线程在处理用户请求时，如果发现访问的数据不在 Redis 里，就加个互斥锁，保证同一时间内只有一个请求来构建缓存。未能获取互斥锁的请求等待锁释放后重新读取缓存，或者返回空值或者默认值。</li><li>双key策略：使用两个key，一个是主key，设置过期时间，一个是备key，不会设置过期，key不一样，但是value值是一样。当业务线程访问不到主key的缓存数据时，就直接返回备key的缓存数据，然后在更新缓存的时候，同时更新主key和备key的数据。</li><li>后台更新缓存：业务线程不再负责更新缓存，缓存也不设置有效期，而是让缓存“永久有效”，并将更新缓存的工作交由后台线程定时更新。<br>Redis故障宕机</li><li>服务熔断或请求限流机制：启动服务熔断机制，暂停业务应用对缓存服务的访问，直接返回错误，所以不用再继续访问数据库，保证数据库系统的正常运行，等到 Redis 恢复正常后，再允许业务应用访问缓存服务。服务熔断机制是保护数据库的正常允许，但是暂停了业务应用访问缓存服系统，全部业务都无法正常工作。也可以启用请求限流机制，只将少部分请求发送到数据库进行处理，再多的请求就在入口直接拒绝服务。<br>构建高可靠集群：通过主从节点的方式构建 Redis 缓存高可靠集群。如果 Redis 缓存的主节点故障宕机，从节点可以切换成为主节点，继续提供缓存服务，避免了由于 Redis 故障宕机而导致的缓存雪崩问题。</li></ol><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>如果缓存中的某个热点数据过期了，此时大量的请求访问了该热点数据，就无法从缓存中读取，直接访问数据库，数据库很容易就被高并发的请求冲垮。</p><p>解决方案：</p><ul><li>互斥锁方案：保证同一时间只有一个业务线程更新缓存，未能获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或者默认值。<br>不给热点数据设置过期时间：由后台异步更新缓存，或者在热点数据准备要过期前，提前通知后台线程更新缓存以及重新设置过期时间。</li></ul><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>当用户访问的数据，既不在缓存中，也不在数据库中，导致请求在访问缓存时，发现缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据，没办法构建缓存数据，来服务后续的请求。那么当有大量这样的请求到来时，数据库的压力骤增，这就是缓存穿透的问题。</p><p>解决方案</p><ul><li>非法请求的限制：当有大量恶意请求访问不存在的数据的时候会发生缓存穿透，可以在 API 入口处判断求请求参数是否合理，请求参数是否含有非法值、请求字段是否存在，如果判断出是恶意请求就直接返回错误，避免进一步访问缓存和数据库。</li><li>缓存空值或者默认值：当线上业务发现缓存穿透的现象时，可以针对查询的数据，在缓存中设置一个空值或者默认值，这样后续请求就可以从缓存中读取到空值或者默认值，返回给应用，而不会继续查询数据库。</li><li>使用布隆过滤器快速判断数据是否存在，避免通过查询数据库来判断数据是否存在：可以在写入数据库数据时，使用布隆过滤器做个标记，然后在用户请求到来时，业务线程确认缓存失效后，可以通过查询布隆过滤器快速判断数据是否存在，如果不存在，就不用通过查询数据库来判断数据是否存在。</li></ul><h3 id="7-Redis的同步机制？"><a href="#7-Redis的同步机制？" class="headerlink" title="7. Redis的同步机制？"></a>7. Redis的同步机制？</h3><p>Redis可以使用主从同步，从从同步。第一次同步时，主节点做一次bgsave，并同时将后续修改操作记录到内存buffer，待完成后将rdb文件全量同步到复制节点，复制节点接受完成后将rdb镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。</p><h3 id="8-Redis主从同步常见性能问题和解决方案"><a href="#8-Redis主从同步常见性能问题和解决方案" class="headerlink" title="8. Redis主从同步常见性能问题和解决方案"></a>8. Redis主从同步常见性能问题和解决方案</h3><p>8.1 Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照</p><p>8.2 Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久</p><p>化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。</p><p>8.3 Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。</p><p>8.4 Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内。</p><h3 id="9-redis的缓存失效策略和主键失效机制"><a href="#9-redis的缓存失效策略和主键失效机制" class="headerlink" title="9. redis的缓存失效策略和主键失效机制"></a>9. redis的缓存失效策略和主键失效机制</h3><p>作为缓存系统都要定期清理无效数据，就需要一个主键失效和淘汰策略.</p><p>在Redis当中，有生存期的key被称为volatile。在创建缓存时，要为给定的key设置生存期，当key过期的时候（生存期为0），它可能会被删除。</p><p>1、影响生存时间的一些操作</p><blockquote><p>生存时间可以通过使用 DEL 命令来删除整个 key 来移除，或者被 SET 和 GETSET 命令覆盖原来的数据，也就是说，修改key对应的value和使用另外相同的key和value来覆盖以后，当前数据的生存时间不同。</p></blockquote><blockquote><p>比如说，对一个 key 执行INCR命令，对一个列表进行LPUSH命令，或者对一个哈希表执行HSET命令，这类操作都不会修改 key 本身的生存时间。另一方面，如果使用RENAME对一个 key 进行改名，那么改名后的 key的生存时间和改名前一样。</p></blockquote><blockquote><p>RENAME命令的另一种可能是，尝试将一个带生存时间的 key 改名成另一个带生存时间的 another_key ，这时旧的 another_key (以及它的生存时间)会被删除，然后旧的 key 会改名为 another_key ，因此，新的 another_key 的生存时间也和原本的 key 一样。使用PERSIST命令可以在不删除 key 的情况下，移除 key 的生存时间，让 key 重新成为一个persistent key 。</p></blockquote><p>2、如何更新生存时间</p><blockquote><p>可以对一个已经带有生存时间的 key 执行EXPIRE命令，新指定的生存时间会取代旧的生存时间。过期时间的精度已经被控制在1ms之内，主键失效的时间复杂度是O（1），<br>EXPIRE和TTL命令搭配使用，TTL可以查看key的当前生存时间。设置成功返回 1；当 key 不存在或者不能为 key 设置生存时间时，返回 0 。</p></blockquote><p>最大缓存配置 在 redis 中，允许用户设置最大使用内存大小 server.maxmemory 默认为0，没有指定最大缓存，如果有新的数据添加，超过最大内存，则会使redis崩溃，所以一定要设置。redis 内存数据集大小上升到一定大小的时候，就会实行数据淘汰策略。redis 提供 6种数据淘汰策略：</p><ul><li><p>volatile-lru： 从已设置过期时间的数据集（ server.db[i].expires）中挑选最近最少使用的数据淘汰</p></li><li><p>volatile-ttl： 从已设置过期时间的数据集（ server.db[i].expires）中挑选将要过期的数据淘汰</p></li><li><p>volatile-random： 从已设置过期时间的数据集（ server.db[i].expires）中任意选择数据淘汰</p></li><li><p>allkeys-lru： 从数据集（ server.db[i].dict）中挑选最近最少使用的数据淘汰</p></li><li><p>allkeys-random： 从数据集（ server.db[i].dict）中任意选择数据淘汰</p></li><li><p>no-enviction（驱逐）： 禁止驱逐数据</p></li></ul><blockquote><p>注意这里的6种机制，volatile和allkeys规定了是对已设置过期时间的数据集淘汰数据还是从全部数据集淘汰数据，后面的lru、ttl以及random是三种不同的淘汰策略，再加上一种no-enviction永不回收的策略。</p></blockquote><p>使用策略规则：</p><ul><li>如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用allkeys-lru</li><li>如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用allkeys-random</li></ul><p>三种数据淘汰策略：</p><p>ttl和random比较容易理解，实现也会比较简单。主要是Lru最近最少使用淘汰策略，设计上会对key 按失效时间排序，然后取最先失效的key进行淘汰</p><h3 id="10-怎么用redis分布式锁？"><a href="#10-怎么用redis分布式锁？" class="headerlink" title="10. 怎么用redis分布式锁？"></a>10. 怎么用redis分布式锁？</h3><p>基于 Redis 节点实现分布式锁时，对于加锁操作，我们需要满足三个条件。</p><p>加锁包括了读取锁变量、检查锁变量值和设置锁变量值三个操作，但需要以原子操作的方式完成，所以，我们使用 SET 命令带上 NX 选项来实现加锁；<br>锁变量需要设置过期时间，以免客户端拿到锁后发生异常，导致锁一直无法释放，所以，我们在 SET 命令执行时加上 EX&#x2F;PX 选项，设置其过期时间；<br>锁变量的值需要能区分来自不同客户端的加锁操作，以免在释放锁时，出现误释放操作，所以，我们使用 SET 命令设置锁变量值时，每个客户端设置的值是一个唯一值，用于标识客户端；</p><p>满足这三个条件的分布式命令如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SET lock_key unique_value NX PX <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><ul><li>lock_key 就是 key 键；</li><li>unique_value 是客户端生成的唯一的标识，区分来自不同客户端的锁操作；</li><li>NX 代表只在 lock_key 不存在时，才对 lock_key 进行设置操作；</li><li>PX 10000 表示设置 lock_key 的过期时间为 10s，这是为了避免客户端发生异常而无法释放锁。</li></ul><p>而解锁的过程就是将 lock_key 键删除（del lock_key），但不能乱删，要保证执行操作的客户端就是加锁的客户端。所以，解锁的时候，我们要先判断锁的 unique_value 是否为加锁客户端，是的话，才将 lock_key 键删除。</p><p>可以看到，解锁是有两个操作，这时就需要 Lua 脚本来保证解锁的原子性，因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，保证了锁释放操作的原子性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 释放锁时，先比较 unique_value 是否相等，避免锁的误释放</span><br><span class="hljs-keyword">if</span> redis.<span class="hljs-title function_">call</span>(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-variable constant_">KEYS</span>[<span class="hljs-number">1</span>]) == <span class="hljs-variable constant_">ARGV</span>[<span class="hljs-number">1</span>] then<br>    <span class="hljs-keyword">return</span> redis.<span class="hljs-title function_">call</span>(<span class="hljs-string">&quot;del&quot;</span>,<span class="hljs-variable constant_">KEYS</span>[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>end<br></code></pre></td></tr></table></figure><p>这样一来，就通过使用 SET 命令和 Lua 脚本在 Redis 单节点上完成了分布式锁的加锁和解锁。</p><h3 id="11-Redis分布式锁操作"><a href="#11-Redis分布式锁操作" class="headerlink" title="11. Redis分布式锁操作"></a>11. Redis分布式锁操作</h3><p>先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。</p><p><em>如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？</em></p><p>set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的。</p><h3 id="12-Redis怎么节省内存"><a href="#12-Redis怎么节省内存" class="headerlink" title="12. Redis怎么节省内存?"></a>12. Redis怎么节省内存?</h3><ul><li>1、清除过期key</li></ul><p>一般来说，Redis中的key都有一个过期时间（TTL），当一个key到达了过期时间后，Redis会自动把它删除掉。如果切实情况下发现过期key很少被清理，可以通过手动扫描和清理的方式解决该问题。可以通过手动执行DEL <key>命令或者设置自动定时清理已标记为过期的键值对。</p><ul><li>2、开启压缩机制</li></ul><p>开启Redis的压缩机制是减少内存占用的一种有效方式。 开启后，数据将被压缩后存储，Redis就可以使用更小的空间来存储相同数量的数据。但是，在压缩数据时使用CPU势必会带来一定的系统负荷。因此，在开启前应该进行全面评估。</p><ul><li>3、启用LRU算法</li></ul><p>大规模使用设置 Redis 的 maxmemory 属性最好开启 LRU 超出时删除策略，以确保 Redis 服务器不会无限添加项目并从而导致内存耗尽。Redis可以根据“最近最少的访问时间”（Least Recently Used）算法，删除过时的、很久没有使用过的键值对。同时，redis还提供上下文相关的LRU算法（Comte-Tournier），不同于简单的链表实现。</p><ul><li>4、对键值进行优化</li></ul><p>Redis目前支持五种数据类型：字符串，列表，哈希表，集合和有序集合。在使用这些类型时，我们可以采取以下措施来优化内存：</p><p>字符串(String)类型：使用整数或布尔值代替字符串，可以显著降低内存占用。</p><p>列表(List)类型：对于含有大量重复元素的列表，可以使用Redis List压缩来降低其内存消耗。</p><p>哈希表(Hash)类型：如果key-value 对数量很少，这种类型的空间效率非常低。尽量避免在哈希表里使用一些”tiny keys”。</p><p>集合(Set)类型：使用基数估计法(BloomFilter)等技术来节约空间。</p><p>有序集合(Sorted Set)类型: 针对只存储分数（score）但是成员(member)本身很小的功能需求，可以通过配置Redis启用ziplist和small ziplist。</p><ul><li>5、分割数据库</li></ul><p>将数据拆分多个数据库，各自独立运行，从而有效地分散每个数据库的负载，减少数据库内存压力。在使用多个数据库时，必须小心控制它们的大小并注意细节处理，以免耗尽可用资源。</p><ul><li>6、使用Redis集群</li></ul><p>当单台 Redis 服务器无法满足业务需求或者需要提高死活性和升级能力时，可以考虑将其扩展到Redis集群中。通过搭建分布式集群，即使其中一台主机发生崩溃或停机，整个系统也可以保证数据的完整性和可用性。此外，集群模式下每个节点暴露出的单独的内存限制，还可以更好地控制内存占用情况。</p><ul><li>7、随时了解Redis内存使用情况</li></ul><p>Redis提供命令、日志等多种方法来随时查看内存使用情况，并进行相关调整。理解Redis内存特性是优化Redis内存使用的前提条件，同时还应该综合考虑当前硬件配置、业务需求及实际情况等因素。</p><p>总之，由于Redis完全基于内存操作，因此它的内存越大，对服务器的要求就越高。为了避免性能问题和故障，我们必须采取一系列措施来降低Redis的内存使用率。在实际运行过程中，根据业务特点、数据类型和目标等因素，可以采取上述措施或他们的组合来进一步优化Redis的内存使用效率。</p>]]></content>
    
    
    <categories>
      
      <category>面试必备知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再见了青春，这一次，真的要走了。（史上最佳告别信）</title>
    <link href="/2023/07/17/article-cj/"/>
    <url>/2023/07/17/article-cj/</url>
    
    <content type="html"><![CDATA[<h3 id="《致波特兰的一封信》"><a href="#《致波特兰的一封信》" class="headerlink" title="《致波特兰的一封信》"></a>《致波特兰的一封信》</h3></br><p>亲爱的波特兰：</p><p>你知道我是怎么确认交易消息的吗？</p><p>我没被Woj或Shams的推特轰炸，也没有被100条朋友和家人短信吓醒。事实上，没有任何闹剧发生，我知道一切事情的进展。</p><p>尽管商业联盟有时会非常疯狂和冷血，但在这次交易中一切都非常公开、透明与诚实。</p><p>这就是我与开拓者之间的羁绊。我们彼此清楚，尽管拥有美好的过去，但故事将在这里迎来终章。</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj2.jpg"></p><p>感谢克里斯-海耶斯（NBC评论员）的好意，但内情必须由我来说。因为这是非常私人化的事情，只有这样才是正确的。</p><p>有趣的是，交易达成的前一晚，我和利拉德在更衣室有说有笑，正当我要走进浴室的时候，我的手机响了。</p><p>如果了解我的话，你就知道除了临近交易截止日，我通常都开着勿扰模式。我将我的经纪人列入了白名单，所以无论如何他的电话我都能接到。</p><p>因此当手机响起时，铃声听起来就像恐怖电影里的一样。大家都停下手中的事，我看了我的手机，确实是我经纪人的电话。利拉德看向我，眼神仿佛在说，“我的天，真的发生了？”</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj5.jpg"></p><p>我们已经深陷交易流言很久了，以至于这对我们来说就像是玩笑。我们谈过很多，因为流言太多了，我们甚至不会太在意。</p><p>我的第一反应是：“让我看看发生了什么，我很快就回来。”我的经纪人告诉我，鹈鹕参与了交易，但还没有最终完成，他让我守口如瓶。</p><p>所以我回到更衣室里说：“暂无消息，兄弟，我还在这儿！”</p><p>是不是很像华尔街之狼的作风，我仿佛小李子一样，“我不会滚蛋！一切照常！”</p><p>我们都在笑，要不然还能怎么样呢？</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj4.jpg"></p><p>显然，当我晚上离开那栋楼时，我清楚这可能是我们在一起的最后时光。</p><p>但是，能够按照我自己的方式离开，而不是在所有人面前接到电话，或者有人来把我从训练中叫出来，这就很完美了。</p><p>我们家里有一个1个月大的宝宝，所以我和妻子都很难有深度睡眠，第二天早上6点我就和妻子起床喂奶。老实说，感觉有点舒服和惬意。</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj3.jpg"></p><p>因为我们坐在自己的房子里，在这个我们热爱的城市里。太阳还没有升起，我半睡半醒，手里抱着我的儿子，所有父亲都明白这样的时刻难以用语言形容。</p><p>就在那时，我的手机响了，清晨6点的电话，不用猜都知道是谁。</p><p>我接通电话，经纪人告诉我交易达成，我将前往鹈鹕，新闻几分钟后就会发布，让我做好准备。</p><p>当时我和妻子坐在那里，小宝宝不哭不闹，屋里一片平和，我的手机也没开始响。我和妻子对视着，眼神仿佛在说，“好吧，那现在该干些什么？”</p><p>这一切绝不只是生意，波特兰是我的家。在同一个地方待了9年，你不可能不受到影响。我指的不是篮球，而是灵魂。</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj6.jpg"></p><p>我还没想好如何跟大家道别。</p><p>交易后的那个晚上，我来到更衣室取球鞋等一切我的东西，那里空无一人。这有点太不真实了，我不知道他们打包东西会有多快，但当我走进更衣室时，我的名牌已经全部被摘下来了。装备经理已经把我的东西叠好并放在我的位置前。（感谢埃里克和科里，我会怀念你们的。）</p><p>我本来想在每个人的座椅上留一件签名球衣，但当我给保安、工作人员，以及每一个让开拓者变得更好的人分完球衣，我已经没有球衣可以留给队里的年轻人了，所以我发短信跟他们说我欠他们球衣。</p><p>你知道，当你在球队里有太多家人般的朋友时，你必须去额外买点球衣，这种感觉非常真实。（感谢我的朋友托德-弗西尔，他是NBA最好的放松教练，等到3月30日我们再次见面，我会给你带件球衣和30块麦乐鸡，放心！）</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj7.jpg"></p><p>从某种程度上来说，我很庆幸当时没人在，自己可以最后一次看看更衣室并把东西一次拉走。因为我觉得如果撞见队友，我可能会不知所措。有趣的是，当利拉德看到椅子上的球衣时，他给我发来短信：“该死！兄弟，你把我弄哭了！”</p><p>我们不能让利拉德哭，年轻人们见不得这样的场面，这会像见到电影中的大反派哭一样。</p><p>要知道，我和利拉德真的是在这个地方一同成长的。现在回想起来仍然感觉疯狂，刚入联盟的第一年，每次去客场时，我们都会在早上的投篮训练后用最快的速度洗完澡，然后穿着队服直接去商场。</p><p>没有午休，不带保安，啥都不带，就像两个小孩子逃学一样。我们会在旧金山、休斯顿或其他某地的商店里逛几个小时，随意窜进一家店。那是在我们签下大合同之前，因此我指的是一些中端店铺。</p><p>我们会跟店家讨价还价，打7折，如果打7折就买。我们总会去Macy百货看看那里有什么，可能会要一杯冰沙，或是一个软椒盐卷饼。</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj8.jpg"></p><p>记得在新秀赛季，我特别想买一只手表，但那对我来说太贵了，好像是3000美元吧。我怕买了会破产，以至于一次次地到柜台与店员讨价还价，心态大概是，下次吧，下次一定买。</p><p>达米安总是跟我说，“老哥，买下那块表吧，你可是在NBA打球。”</p><p>而我则说：“兄弟，我可不想在20年后破产！”所以我把我的客场工资都存了起来，大概存了有两个月吧，最终我用这笔钱以5折的价格买下了那块手表。</p><p>我还记得让店员刷我银行卡时那种忐忑不安的心情。如果想笑你就尽管笑吧，反正这块表仍对我意义非凡，我到现在也还留着它。它让我想起自己的少年时光，彼时我对NBA，对这座城市，对每样事物都感到无比新鲜。</p></br><p>我和达米安曾经穿着开拓者队服在街上连逛几个小时而不被人认出。有时我们会赶回酒店径直坐上前往球馆的巴士，手里提着一堆购物袋，那时队里的老同志们会瞪着我们，像是对我们很不耐烦。</p><p>有趣的是，现在的我无法想象，白天逛3个小时街晚上再打35分钟比赛会怎么样。我需要休息、冥想、拉伸、恢复。</p><p>想到自己已经改变了那么多，这太疯狂了。现在每次投篮训练后，我和达米安通常都是和自己的儿子视频聊天。但当你年轻时，生活就像一部电影，就像活在梦里一样。</p><p>我记得达米安开始在街上被人们认出来的时候，我还是个无名之辈。当时我心里想的是，啥时候能有人认出我来啊？啥时候我才能看到有小孩穿着3号球衣？</p><p>记得在我的第二个赛季，我还没进入首发。我清楚地记得有一天我对达米安说：“在这里我永远没机会首发。为什么他们要选我？我搞不明白。”</p><p>达米安的表情像是“你疯了吗”一样，然后跟我说：“大哥你想啥呢？总有一天我们会成为后场组合。我们会在这儿打很久，我们会改变这个地方。你会见证这一切的。”</p><p>我说：“你说的这些我都不信。”他说：“你会相信的。”</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj9.jpg"></p><p>那年季后赛，我在对灰熊的比赛中得到33分，达米安赛后跑向我。</p><p>“看到没有？我是怎么跟你说的？我们会并肩作战，一起拼下去。”他有那样的愿景，我不知道他是怎么看到的，但他做到了。</p><p>如果没有我的队友们，这一切将毫无意义。这些年来，如果没有那些值得信赖的队友们，这一切就真的只是生意。小莫、厄尔-沃特森、多雷尔-怀特、埃文-特纳、哈克利斯、卡曼、沙巴兹、阿德等等，在他们的帮助下我得以不断前行。</p><p>当然还有努尔基奇，我不会忘记大个子努尔基奇，我一生的波黑兄弟。</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj10.jpg"></p><p>我永远不会忘记2019年他因腿部骨折整天窝在沙发，我经常会与他视频通话以确保他的情况。后来有一天，我决定拜访他家。当我走进屋里时，我听到的只有电视里传来的胡言乱语，然后他就把频道调到体育频道什么的。</p><p>我当时说：“兄弟，别介意我。这里是你家，我们看点你平时看的东西就好。”他问我：“你确定你想看我看的？”我说：“当然，为什么不呢？”</p><p>然后他就向我安利波黑的电视，没有字幕的那种，我猜都是些肥皂剧情，但可能也是喜剧？</p><p>有一位杂工，他在追求一位年轻的女人，这似乎是主要的情节，但然后他们又会翻转剧情，加入各种疯狂的片段。</p><p>我不停转头看向努尔基奇：“好吧，所以现在主人公是一位机修工人？他想追求那个女孩，还是说…”</p><p>我本以为那是一部严肃正剧，但随后努尔基奇就开始大笑和看向我，好像在说，“是不是很有趣？”这家伙疯了。</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj12.jpg"></p><p>时不时地，努尔基奇家昂贵的进口猫会在房子里游荡，而他喝着他习惯的日常7到10杯咖啡。当你去努尔基奇家的时候，就是这种氛围。</p><p>他抚摸着猫，告诉我：“你得装一个宠物摄像机。我要给你买一个。”（然后他真的买了。）</p><p>被交易后，我打电话告诉他我在他椅子上留了一件球衣，而他说：“我已经有一件了。”我很惊讶：“啥意思？”</p><p>他说：“是的，你的上一场比赛结束后我从器材室偷了一件。”</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj13.jpg"></p><p>朋友们，这就是我的队友们。他们在我心里就是这样，不是赢家或输家，而是我的队友。当我写下这封信时，这些回忆不断在我的脑海中闪现。事实就是这样的。</p><p>我想到有一年夏天在拉斯维加斯，我和达米安早上6点起来出门工作，只睡了4个小时。我想到了努尔基奇为我做的那些完美挡拆。但坦白说，现在涌上我心头的是那些平凡的小事，比如那天和努尔基奇看波黑电视节目。</p><p>有一年，达米安邀请我一起过感恩节，他父亲给我做了炖牛尾。我和蒂姆-弗雷泽第一次在一个葡萄园里品尝真正的俄勒冈黑皮诺。我第一次在Ringside餐厅品尝火山土。</p><p>每场比赛后我们都会去Departure餐厅吃饭，每晚都坐同一张大桌子。新秀赛季每个早上都在堵车中汗流浃背，因为阿德要让我去给他买Krispy Kreme的甜甜圈。</p><p>阿德还给我500美元让我即兴表演，并让我别告诉马修斯和巴图姆，这样我还可以从他们身上赚钱。（阿德，你是真正的MVP！）</p><p>训练后我会收到多雷尔-怀特的短信，“下楼菜鸟，我带你去吃饭。”（现在，我也成为了那个照顾新秀的人。）</p><p>都是诸如此类的小事。</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj14.jpg"></p><p>西决被勇士横扫后，第一次来到波特兰市中心时，心里不确定这座城市会怎样对待我。但无数人走上前来说，“嘿，我想谢谢你们，那是一次轮令人敬畏的系列赛，我们爱你。”</p><p>我想说的是，我们被横扫了，但整个夏天我们都没有付过一次晚餐钱。这里的氛围太好了。人们非常感激我们能改变球队的心气。这就是波特兰对我的意义——人们不完全把我当成篮球运动员对待，他们把我当成自己社区的一份子。</p><p>对我来说，波特兰不只是一件球衣、一个球队这么简单的事，这里是我的家。我在这儿娶妻生子，开始自己的人生。我真的是将自己的根扎在这里。我的一部分将永远留在俄勒冈州，尤其是我的社区工作。我为我人生的下一个篇章感到兴奋，但别担心，我心永恒。</p><p>我不会离开！不会，这里永远是我们的第二故乡。</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj15.jpg"></p><p>在获悉交易的那天早上，当我坐在那儿思考接下来该做什么时，四周万籁俱寂。</p><p>我对妻子说：“你知道最好的是什么吗？这次分手并不丑陋。这个地方对我们一直很好，我们带着好的条件离开。你还能要求什么？”</p><p>我想去新奥尔良，这是真正能弥补疼痛的事情。作为一名纯粹的篮球运动员，我很兴奋能与锡安、英格拉姆、瓦兰丘纳斯以及所有那里的年轻人一起打球。</p><p>我真的觉得我表现出了足够多的职业精神和准备，因为在9年的时间里，我已经看透了联盟的一切。我经历过DNP，经历过质疑和嘲讽，经历过抢七，赢过也输过。</p></br><p>当你还是联盟里的年轻人时，你不知道什么是你不知道的——请接受我这位曾经整天逛商场的过来人的话，我认为我能给新奥尔良带来许多智慧。</p><p>作为一个普通人，我真的很兴奋能搬到那座城市去路易斯安娜超级巨蛋看一些橄榄球比赛。（虽然我的儿子从小就被培养为克利夫兰布朗队球迷，对此我很抱歉。）</p><p>在经历所有的流言蜚语后，交易最终完成了。没有闹剧，没有废话，完全的职业化。我还能再要求什么？</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj16.jpg"></p><p>致波特兰的每一个人，致我的队友、球队、球迷，致整个社区。谢谢你们，这是我发自肺腑的感谢。</p><p>我会在另外的地方关注你们。</p><p>我们的关系已如此之深，无法用言语表达。比胜利更重要，比球场上发生的一切更重要。对我来说，这是9年的欢笑、伤病、心碎、快乐以及精神成长。这是我的全部。</p><p>那天结束时，当我回想起这些，想到我们作为一支球队有如此深的感情，感觉很疯狂。在一个偏处西海岸一隅的小球市，我们制造了很多轰动，也制造了很多回忆。我们保持忠诚，每一天都用真心代表着这座城市。</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/cj11.jpg"></p><p>我会永远为此自豪。</p><p>也许我们没有实现我们的终极目标。篮球如此，人生亦然。但该死的，如果不试试怎么知道！</p><p>——爱你们的，CJ</p><p><em>注：文章图片转自公众号《篮球技巧教学》</em></p>]]></content>
    
    
    <categories>
      
      <category>好文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CJ麦科勒姆</tag>
      
      <tag>告别</tag>
      
      <tag>青春</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口层面集成翻译插件实现返回结果多语言的方案</title>
    <link href="/2023/07/16/java-api-mutil-language/"/>
    <url>/2023/07/16/java-api-mutil-language/</url>
    
    <content type="html"><![CDATA[<h3 id="背景及设计思路"><a href="#背景及设计思路" class="headerlink" title="背景及设计思路"></a>背景及设计思路</h3><blockquote><p>在做接口开发的时候给客户端的响应需要根据不同的语言返回对应的结果，主要核心内容有两点：</p></blockquote><ul><li>返回结果做多语言转换</li><li>接口进行统一处理</li></ul><h3 id="各厂商翻译sdk集成示例"><a href="#各厂商翻译sdk集成示例" class="headerlink" title="各厂商翻译sdk集成示例"></a>各厂商翻译sdk集成示例</h3><h4 id="1-腾讯云翻译"><a href="#1-腾讯云翻译" class="headerlink" title="1. 腾讯云翻译"></a>1. 腾讯云翻译</h4><p>1.1 引入腾讯云sdk</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--腾讯云sdk--&gt;<br>  &lt;dependency&gt;<br>   &lt;groupId&gt;com.tencentcloudapi&lt;/groupId&gt;<br>   &lt;artifactId&gt;tencentcloud-sdk-java&lt;/artifactId&gt;<br>   &lt;version&gt;<span class="hljs-number">3.0</span><span class="hljs-number">.29</span>&lt;/version&gt;<br>  &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>1.2 实现多语言翻译工具类</p><p>登录腾讯云平台 -&gt; 搜索机器翻译 -&gt; 资源包 -&gt; 创建资源-&gt; 点击用户头像-&gt; 访问管理 -&gt; 获取密钥</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.jeecg.modules.dzcloud.utils;<br><br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.Credential;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.exception.TencentCloudSDKException;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.profile.ClientProfile;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.profile.HttpProfile;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.tmt.v20180321.TmtClient;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.tmt.v20180321.models.TextTranslateRequest;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.tmt.v20180321.models.TextTranslateResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jay</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/7/14 16:47</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TranslateUtils</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sourceText 带翻译文本</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> source 原语言</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target 目标语言</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">textTranslate</span><span class="hljs-params">(String sourceText, String source, String target)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 设置腾讯云 API 密钥</span><br>            <span class="hljs-type">Credential</span> <span class="hljs-variable">cred</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Credential</span>(<span class="hljs-string">&quot;AKIDPze6MTZTBpOsRB0f8RcaSYQH0X4XwALS&quot;</span>, <span class="hljs-string">&quot;ELGAvdPTehjdnupdEdAXlDdQMEAzazSq&quot;</span>);<br><br>            <span class="hljs-comment">// 创建 HTTP 参数配置</span><br>            <span class="hljs-type">HttpProfile</span> <span class="hljs-variable">httpProfile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpProfile</span>();<br>            httpProfile.setEndpoint(<span class="hljs-string">&quot;tmt.tencentcloudapi.com&quot;</span>); <span class="hljs-comment">// 设置 API 地域</span><br><br>            <span class="hljs-comment">// 创建客户端配置</span><br>            <span class="hljs-type">ClientProfile</span> <span class="hljs-variable">clientProfile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientProfile</span>();<br>            clientProfile.setHttpProfile(httpProfile);<br><br>            <span class="hljs-comment">// 创建翻译客户端</span><br>            <span class="hljs-type">TmtClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TmtClient</span>(cred, <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, clientProfile);<br><br>            <span class="hljs-comment">// 创建翻译请求</span><br>            <span class="hljs-type">TextTranslateRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextTranslateRequest</span>();<br>            request.setSourceText(sourceText);<br>            request.setSource(source);<br>            request.setTarget(target);<br>            request.setProjectId(<span class="hljs-number">0</span>); <span class="hljs-comment">// 可选的项目 ID</span><br><br>            <span class="hljs-comment">// 发送翻译请求</span><br>            <span class="hljs-type">TextTranslateResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.TextTranslate(request);<br><br>            <span class="hljs-comment">// 返回翻译结果</span><br>            <span class="hljs-keyword">return</span> response.getTargetText();<br>        &#125; <span class="hljs-keyword">catch</span> (TencentCloudSDKException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> e.getMessage();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>1.3 调用结果示例</p><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">header: &#123;<br>    <span class="hljs-string">&quot;X-Lang-Target&quot;</span>: <span class="hljs-string">&quot;ja&quot;</span>, <span class="hljs-comment">//目标语言，日语</span><br>&#125;<br>params: &#123;<br>    <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;你好&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>返回:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;こんにちは&quot;</span>,<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;result&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;timestamp&quot;</span>: <span class="hljs-number">1689557575076</span><br>&#125;<br></code></pre></td></tr></table></figure><p>1.4 费用标准</p><p><img src="https://murphy-blog.oss-cn-hangzhou.aliyuncs.com/tx.jpg"></p><h4 id="2-百度翻译"><a href="#2-百度翻译" class="headerlink" title="2. 百度翻译"></a>2. 百度翻译</h4><p>2.1 登录百度翻译开放平台</p><p>百度翻译开放平台 -&gt; 实名认证 -&gt; 通用文本翻译 -&gt; 获取示例 -&gt; 控制台获取密钥</p><p>2.2 实现翻译工具类</p><p>TransApi</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.jeecg.modules.dzcloud.utils;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransApi</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TRANS_API_HOST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://api.fanyi.baidu.com/api/trans/vip/translate&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">appid</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;20230721001752118&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">securityKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;YaQXjifwr97DppPk_v0K&quot;</span>;<br><br><span class="hljs-comment">//    public TransApi(String appid, String securityKey) &#123;</span><br><span class="hljs-comment">//        this.appid = appid;</span><br><span class="hljs-comment">//        this.securityKey = securityKey;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> query 待翻译文本</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> from 原语言</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> to 目标语言</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getTransResult</span><span class="hljs-params">(String query, String from, String to)</span> &#123;<br>        Map&lt;String, String&gt; params = buildParams(query, from, to);<br>        <span class="hljs-keyword">return</span> HttpGet.get(TRANS_API_HOST, params);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title function_">buildParams</span><span class="hljs-params">(String query, String from, String to)</span> &#123;<br>        Map&lt;String, String&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>        params.put(<span class="hljs-string">&quot;q&quot;</span>, query);<br>        params.put(<span class="hljs-string">&quot;from&quot;</span>, from);<br>        params.put(<span class="hljs-string">&quot;to&quot;</span>, to);<br><br>        params.put(<span class="hljs-string">&quot;appid&quot;</span>, appid);<br><br>        <span class="hljs-comment">// 随机数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> String.valueOf(System.currentTimeMillis());<br>        params.put(<span class="hljs-string">&quot;salt&quot;</span>, salt);<br><br>        <span class="hljs-comment">// 签名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> appid + query + salt + securityKey; <span class="hljs-comment">// 加密前的原文</span><br>        params.put(<span class="hljs-string">&quot;sign&quot;</span>, MD5.md5(src));<br><br>        <span class="hljs-keyword">return</span> params;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>MD5工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.jeecg.modules.dzcloud.utils;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MD5编码相关的类</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangjingtao</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5</span> &#123;<br>    <span class="hljs-comment">// 首先初始化一个字符数组，用来存放每个16进制字符</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] hexDigits = &#123; <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>,<br>            <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span> &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得一个字符串的MD5值</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> input 输入的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 输入字符串的MD5值</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">md5</span><span class="hljs-params">(String input)</span> &#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 拿到一个MD5转换器（如果想要SHA1参数换成”SHA1”）</span><br>            <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">messageDigest</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>            <span class="hljs-comment">// 输入的字符串转换成字节数组</span><br>            <span class="hljs-type">byte</span>[] inputByteArray = input.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            <span class="hljs-comment">// inputByteArray是输入字符串转换得到的字节数组</span><br>            messageDigest.update(inputByteArray);<br>            <span class="hljs-comment">// 转换并返回结果，也是字节数组，包含16个元素</span><br>            <span class="hljs-type">byte</span>[] resultByteArray = messageDigest.digest();<br>            <span class="hljs-comment">// 字符数组转换成字符串返回</span><br>            <span class="hljs-keyword">return</span> byteArrayToHex(resultByteArray);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException | UnsupportedEncodingException e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件的MD5值</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">md5</span><span class="hljs-params">(File file)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (!file.isFile()) &#123;<br>                System.err.println(<span class="hljs-string">&quot;文件&quot;</span> + file.getAbsolutePath() + <span class="hljs-string">&quot;不存在或者不是文件&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> md5(in);<br><br>            in.close();<br><br>            <span class="hljs-keyword">return</span> result;<br><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">md5</span><span class="hljs-params">(InputStream in)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">messagedigest</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br><br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((read = in.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                messagedigest.update(buffer, <span class="hljs-number">0</span>, read);<br>            &#125;<br><br>            in.close();<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> byteArrayToHex(messagedigest.digest());<br><br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">byteArrayToHex</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] byteArray)</span> &#123;<br>        <span class="hljs-comment">// new一个字符数组，这个就是用来组成结果字符串的（解释一下：一个byte是八位二进制，也就是2位十六进制字符（2的8次方等于16的2次方））</span><br>        <span class="hljs-type">char</span>[] resultCharArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[byteArray.length * <span class="hljs-number">2</span>];<br>        <span class="hljs-comment">// 遍历字节数组，通过位运算（位运算效率高），转换成字符放到字符数组中去</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : byteArray) &#123;<br>            resultCharArray[index++] = hexDigits[b &gt;&gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">0xf</span>];<br>            resultCharArray[index++] = hexDigits[b &amp; <span class="hljs-number">0xf</span>];<br>        &#125;<br><br>        <span class="hljs-comment">// 字符数组组合成字符串返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(resultCharArray);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>HttpGET</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.jeecg.modules.dzcloud.utils;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.Closeable;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> java.security.KeyManagementException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.security.cert.CertificateException;<br><span class="hljs-keyword">import</span> java.security.cert.X509Certificate;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> javax.net.ssl.HttpsURLConnection;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLContext;<br><span class="hljs-keyword">import</span> javax.net.ssl.TrustManager;<br><span class="hljs-keyword">import</span> javax.net.ssl.X509TrustManager;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpGet</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SOCKET_TIMEOUT</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>; <span class="hljs-comment">// 10S</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">GET</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GET&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">get</span><span class="hljs-params">(String host, Map&lt;String, String&gt; params)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 设置SSLContext</span><br>            <span class="hljs-type">SSLContext</span> <span class="hljs-variable">sslcontext</span> <span class="hljs-operator">=</span> SSLContext.getInstance(<span class="hljs-string">&quot;TLS&quot;</span>);<br>            sslcontext.init(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrustManager</span>[] &#123; myX509TrustManager &#125;, <span class="hljs-literal">null</span>);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sendUrl</span> <span class="hljs-operator">=</span> getUrlWithQueryString(host, params);<br><br>            <span class="hljs-comment">// System.out.println(&quot;URL:&quot; + sendUrl);</span><br><br>            <span class="hljs-type">URL</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(sendUrl); <span class="hljs-comment">// 创建URL对象</span><br>            <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> (HttpURLConnection) uri.openConnection();<br>            <span class="hljs-keyword">if</span> (conn <span class="hljs-keyword">instanceof</span> HttpsURLConnection) &#123;<br>                ((HttpsURLConnection) conn).setSSLSocketFactory(sslcontext.getSocketFactory());<br>            &#125;<br><br>            conn.setConnectTimeout(SOCKET_TIMEOUT); <span class="hljs-comment">// 设置相应超时</span><br>            conn.setRequestMethod(GET);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> conn.getResponseCode();<br>            <span class="hljs-keyword">if</span> (statusCode != HttpURLConnection.HTTP_OK) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Http错误码：&quot;</span> + statusCode);<br>            &#125;<br><br>            <span class="hljs-comment">// 读取服务器的数据</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> conn.getInputStream();<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                builder.append(line);<br>            &#125;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> builder.toString();<br><br>            close(br); <span class="hljs-comment">// 关闭数据流</span><br>            close(is); <span class="hljs-comment">// 关闭数据流</span><br>            conn.disconnect(); <span class="hljs-comment">// 断开连接</span><br><br>            <span class="hljs-keyword">return</span> text;<br>        &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (KeyManagementException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getUrlWithQueryString</span><span class="hljs-params">(String url, Map&lt;String, String&gt; params)</span> &#123;<br>        <span class="hljs-keyword">if</span> (params == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> url;<br>        &#125;<br><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(url);<br>        <span class="hljs-keyword">if</span> (url.contains(<span class="hljs-string">&quot;?&quot;</span>)) &#123;<br>            builder.append(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            builder.append(<span class="hljs-string">&quot;?&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (String key : params.keySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> params.get(key);<br>            <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 过滤空的key</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>) &#123;<br>                builder.append(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br>            &#125;<br><br>            builder.append(key);<br>            builder.append(<span class="hljs-string">&#x27;=&#x27;</span>);<br>            builder.append(encode(value));<br><br>            i++;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> builder.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Closeable closeable)</span> &#123;<br>        <span class="hljs-keyword">if</span> (closeable != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                closeable.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对输入的字符串进行URL编码, 即转换为%20这种形式</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> input 原文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> URL编码. 如果编码失败, 则返回原文</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(String input)</span> &#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> URLEncoder.encode(input, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> input;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">TrustManager</span> <span class="hljs-variable">myX509TrustManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">X509TrustManager</span>() &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkServerTrusted</span><span class="hljs-params">(X509Certificate[] chain, String authType)</span> <span class="hljs-keyword">throws</span> CertificateException &#123;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkClientTrusted</span><span class="hljs-params">(X509Certificate[] chain, String authType)</span> <span class="hljs-keyword">throws</span> CertificateException &#123;<br>        &#125;<br>    &#125;;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.3 调用结果示例</p><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">header: &#123;<br>    <span class="hljs-string">&quot;X-Lang-Target&quot;</span>: <span class="hljs-string">&quot;ja&quot;</span>, <span class="hljs-comment">//目标语言，日语</span><br>&#125;<br>params: &#123;<br>    <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;你好&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>返回:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;&#123;\&quot;from\&quot;:\&quot;zh\&quot;,\&quot;to\&quot;:\&quot;jp\&quot;,\&quot;trans_result\&quot;:[&#123;\&quot;src\&quot;:\&quot;\你\好\&quot;,\&quot;dst\&quot;:\&quot;\こ\ん\に\ち\は\&quot;&#125;]&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>2.4 费用示例</p><p>通用翻译API产品定价</p><p>标准价格：<br>通用翻译API 按照字符量付费。</p><ul><li><p>标准版：<br>每月前5万字符免费，超出仅收取超出部分费用（QPS&#x3D;1），按49元&#x2F;百万字符计费；</p></li><li><p>高级版：<br>每月前100万字符免费，超出仅收取超出部分费用（QPS&#x3D;10），按49元&#x2F;百万字符计费；</p></li><li><p>尊享版：<br>每月前200万字符免费，超出后仅收取超出部分费用（QPS&#x3D;100），按49元&#x2F;百万字符计费；</p></li></ul><p><em>数据来自官网</em></p><h4 id="3-有道翻译"><a href="#3-有道翻译" class="headerlink" title="3. 有道翻译"></a>3. 有道翻译</h4><p>3.1 登录有道翻译开放平台</p><p>有道翻译开放平台 -&gt; 实名认证 -&gt; 文本翻译 -&gt; 创建应用 -&gt; 控制台获取密钥 -&gt; 获取示例</p><p>3.2 实现翻译工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.jeecg.modules.dzcloud.utils.youdao;<br><br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 网易有道智云翻译服务api调用demo</span><br><span class="hljs-comment"> * api接口: https://openapi.youdao.com/api</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TranslateDemo</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">APP_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;09aab0c277088486&quot;</span>;     <span class="hljs-comment">// 您的应用ID</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">APP_SECRET</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;oN3Sah3t3xtaT6eVEaRKj2saZQRfou2q&quot;</span>;  <span class="hljs-comment">// 您的应用密钥</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getTransResult</span><span class="hljs-params">(String query, String from, String to)</span> &#123;<br>        <span class="hljs-comment">// 添加请求参数</span><br>        Map&lt;String, String[]&gt; params = createRequestParams(query, from, to);<br>        <span class="hljs-comment">// 添加鉴权相关参数</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            AuthV3Util.addAuthParams(APP_KEY, APP_SECRET, params);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// 请求api服务</span><br>        <span class="hljs-type">byte</span>[] result = HttpUtil.doPost(<span class="hljs-string">&quot;https://openapi.youdao.com/api&quot;</span>, <span class="hljs-literal">null</span>, params, <span class="hljs-string">&quot;application/json&quot;</span>);<br>        <span class="hljs-comment">// 打印返回结果</span><br>        <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(result, StandardCharsets.UTF_8);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String[]&gt; createRequestParams(String query, String from, String to) &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * note: 将下列变量替换为需要请求的参数</span><br><span class="hljs-comment">         * 取值参考文档: https://ai.youdao.com/DOCSIRMA/html/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E7%BF%BB%E8%AF%91/API%E6%96%87%E6%A1%A3/%E6%96%87%E6%9C%AC%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1/%E6%96%87%E6%9C%AC%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1-API%E6%96%87%E6%A1%A3.html</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">vocabId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;您的用户词表ID&quot;</span>;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String[]&gt;() &#123;&#123;<br>            put(<span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;query&#125;);<br>            put(<span class="hljs-string">&quot;from&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;from&#125;);<br>            put(<span class="hljs-string">&quot;to&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;to&#125;);<br>        &#125;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>上述方法所用其它工具类可于官网获取</em></p><p>3.3 调用结果示例</p><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">header: &#123;<br>    <span class="hljs-string">&quot;X-Lang-Target&quot;</span>: <span class="hljs-string">&quot;ja&quot;</span>, <span class="hljs-comment">//目标语言，日语</span><br>&#125;<br>params: &#123;<br>    <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;你好&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>返回:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;\<span class="hljs-string">&quot;tSpeakUrl\&quot;:\&quot;https://openapi.youdao.com/ttsapi?q=%E3%81%93%E3%82%93%E3%81%AB%E3%81%A1%E3%81%AF&amp;langType=ja&amp;sign=B20436FE22B5A96B1965327BAD578B27&amp;salt=1689919686501&amp;voice=4&amp;format=mp3&amp;appKey=09aab0c277088486&amp;ttsVoiceStrict=false&amp;osType=api\&quot;,\&quot;requestId\&quot;:\&quot;b7b816b8-61b3-478e-bc06-f5669a6736a0\&quot;,\&quot;query\&quot;:\&quot;你好\&quot;,\&quot;translation\&quot;:[\&quot;こんにちは\&quot;],\&quot;mTerminalDict\&quot;:&#123;\&quot;url\&quot;:\&quot;https://m.youdao.com/m/result?lang=zh-CHS&amp;word=%E4%BD%A0%E5%A5%BD\&quot;&#125;,\&quot;errorCode\&quot;:\&quot;0\&quot;,\&quot;dict\&quot;:&#123;\&quot;url\&quot;:\&quot;yddict://m.youdao.com/dict?le=eng&amp;q=%E4%BD%A0%E5%A5%BD\&quot;&#125;,\&quot;webdict\&quot;:&#123;\&quot;url\&quot;:\&quot;http://mobile.youdao.com/dict?le=eng&amp;q=%E4%BD%A0%E5%A5%BD\&quot;&#125;,\&quot;l\&quot;:\&quot;zh-CHS2ja\&quot;,\&quot;isWord\&quot;:false,\&quot;speakUrl\&quot;:\&quot;https://openapi.youdao.com/ttsapi?q=%E4%BD%A0%E5%A5%BD&amp;langType=zh-CHS&amp;sign=79238E9778353E194FAD9494A4CD97DA&amp;salt=1689919686501&amp;voice=4&amp;format=mp3&amp;appKey=09aab0c277088486&amp;ttsVoiceStrict=false&amp;osType=api\&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>2.4 费用示例</p><ul><li><p>免费体验<br>  对于自然语言翻译服务，各接口拥有一定量的免费查询字符数（新用户注册账户时，系统会向您账户赠予50元体验资金），可免费体验有道智云的服务。<br>  说明：</p><p>  先消费体验金额，体验金额耗尽后，才根据接口调用量在账户余额进行扣费。<br>  单次查询最大字符数默认为5000、每小时最大查询次数默认为100万。如无法满足您的需求，可联系我们，我们会评估您的需求，并做出适当调整。</p></li><li><p>文本翻译价目表<br>  本产品有预付费和后付费两种付费方式：</p><p>  预付费是指先购买资源包再使用本产品服务。用户在用预付费方式购买本产品时，需提前购买不同配额的资源包。<br>  后付费是指按量付费的模式，其中不同语种收费不同，具体计费规则参考按量计费的价目表。如消耗了100w字符（中文到常见语种的互译），则扣费48元；其他情况则扣费100元。<br>  月初，上月累计的调用量清零，重新开始记录本月调用量。资源包内调用量配额不计入按量计费模式的阶梯中。本服务开通后默认选择按量付费模式，购买资源包后优先消耗资源包配额，当资源包内调用次数消耗完毕或资源包过期失效后，自动转为按量计费模式。</p></li></ul><table><thead><tr><th>表头</th><th>表头</th><th>服务内容</th><th>价格（元&#x2F;百万字符）</th></tr></thead><tbody><tr><td>通用版本</td><td>按月调用字符数</td><td>常见语种互译（部分除外）</td><td>48</td></tr><tr><td>通用版本</td><td>按月调用字符数</td><td>中文与非常见语种互译</td><td>100</td></tr><tr><td>通用版本</td><td>按月调用字符数</td><td>其他语种间互译</td><td>100</td></tr><tr><td>专业领域</td><td>按月调用字符数</td><td>中英文互译</td><td>60</td></tr></tbody></table><p><em>数据来源于官网</em></p><h3 id="aop切面统一处理-实现返回结果拦截翻译再返回-直接上代码"><a href="#aop切面统一处理-实现返回结果拦截翻译再返回-直接上代码" class="headerlink" title="aop切面统一处理,实现返回结果拦截翻译再返回,直接上代码"></a>aop切面统一处理,实现返回结果拦截翻译再返回,直接上代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.AfterReturning;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.springblade.core.tool.api.R;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;<br><span class="hljs-keyword">import</span> org.springframework.core.io.ClassPathResource;<br><span class="hljs-keyword">import</span> org.springframework.core.io.Resource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestAttributes;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br> <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对请求参数进行拦截修改</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;lang&quot;,name = &quot;open&quot;,havingValue = &quot;true&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LanguageAspect</span> &#123;<br> <br> <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">objPreFix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;R&quot;</span>;<br> <br> <span class="hljs-meta">@Pointcut(&quot;execution(* com.rksj.controller.*.*(..))&quot;)</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">annotationLangCut</span><span class="hljs-params">()</span>&#123;&#125;;<br> <br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 定义一个并发性Map用来存放信息</span><br><span class="hljs-comment">  */</span><br> Map&lt;String, String&gt; tmpMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br> <br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 在构造函数中进行初始化，后面可从配置文件中初始化</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">LanguageAspect</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-comment">//初始化 KEY为简体  VALUE为  简体###繁体###英文</span><br>  loadSysCfg();<br> <br> &#125;<br> <br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 从配置文件加载</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadSysCfg</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-keyword">try</span>&#123;<br>   <span class="hljs-comment">//加载配置文件</span><br>   <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;language&quot;</span>);<br>   <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> resource.getInputStream();<br>   <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">inputStreamReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is);<br>   <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(inputStreamReader);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">while</span>( (line = bufferedReader.readLine()) != <span class="hljs-literal">null</span> )&#123;<br>    <span class="hljs-comment">//不为空且以#号开头的去掉，注释部分</span><br>    <span class="hljs-keyword">if</span>(StringUtils.isNotEmpty(line) &amp;&amp; !line.startsWith(<span class="hljs-string">&quot;#&quot;</span>))&#123;<br>     String[] lines = line.split(<span class="hljs-string">&quot;###&quot;</span>);<br>     tmpMap.put(lines[<span class="hljs-number">0</span>], line);<br>    &#125;<br>   &#125;<br>  &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>   e.printStackTrace();<br>  &#125;<br> &#125;<br> <br> <br> <br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 拦截controller层返回的结果，修改msg字段</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> point</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@AfterReturning(pointcut=&quot;annotationLangCut()&quot;,returning=&quot;obj&quot;)</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(JoinPoint point, Object obj)</span>  &#123;<br>  Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>  <span class="hljs-type">Object</span> <span class="hljs-variable">backObj</span> <span class="hljs-operator">=</span> obj;<br>  <span class="hljs-keyword">try</span>&#123;<br>   <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br>   <span class="hljs-comment">//从获取RequestAttributes中获取HttpServletRequest的信息</span><br>   <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) requestAttributes.resolveReference(RequestAttributes.REFERENCE_REQUEST);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">bladeLang</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;x-language&quot;</span>);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">targetTxt</span> <span class="hljs-operator">=</span> TranslateUtils.textTranslate(obi.JSON.toJSONString(), <span class="hljs-string">&quot;auto&quot;</span> ,bladeLang);<br>   obj = JSON.parseObject(targetTxt);<br>   &#125;<br>  &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>   e.printStackTrace();<br>   <span class="hljs-comment">//重新赋值给obj，防止try中途修改原始的值</span><br>   obj = backObj;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>多语言</tag>
      
      <tag>api</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot 实现 MySQL 百万级数据量导出并避免 OOM 的解决方案</title>
    <link href="/2023/07/14/springboot-bigdata-export/"/>
    <url>/2023/07/14/springboot-bigdata-export/</url>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>数据导出在项目开发中非常常见，一般的处理流程就是从数据库读取数据，生成excel等格式数据，通过流形式输出给前端。但百万级数据量的数据导出其实用到的并不多，主要在于业务上可能也没有必要性。今天主要讨论下从技术的角度出发，怎样实现百万级数据量导出并且不造成OOM。</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>由于数据量很大，全量加载必然不行，所以我们采用分批加载，而Mysql本身支持Stream查询，我们可以通过Stream流获取数据，然后将数据逐条刷入到文件中，每次刷入文件后再从内存中移除这条数据，从而避免OOM。</p></blockquote><p>由于采用了数据逐条刷入文件，而且数据量达到百万级，所以文件格式就不要采用excel了，excel2007最大才支持104万行的数据,所以我们选择使用csv格式。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ul><li>jpa实现</li></ul><blockquote><p>核心注解如下，需要加入到具体的Repository之上。方法的返回类型定义成Stream。Integer.MIN_VALUE告诉jdbc driver逐条返回数据。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@QueryHints(value = @QueryHint(name = HINT_FETCH_SIZE, value = &quot;&quot; + Integer.MIN_VALUE))</span><br><span class="hljs-meta">@Query(value = &quot;select t from Todo t&quot;)</span><br>Stream&lt;Todo&gt; <span class="hljs-title function_">streamAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><blockquote><p>此外还需要在Stream处理数据的方法之上添加@Transactional(readOnly &#x3D; true)，保证事物是只读的。</p></blockquote><blockquote><p>同时需要注入javax.persistence.EntityManager，通过detach从内存中移除已经使用后的对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/todos.csv&quot;, method = RequestMethod.GET)</span><br><span class="hljs-meta">@Transactional(readOnly = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportTodosCSV</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br> response.addHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/csv&quot;</span>);<br> response.addHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=todos.csv&quot;</span>);<br> response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br> <span class="hljs-keyword">try</span>(Stream&lt;Todo&gt; todoStream = todoRepository.streamAll()) &#123;<br>  <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>  todoStream.forEach(rethrowConsumer(todo -&gt; &#123;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> todoToCSV(todo);<br>   out.write(line);<br>   out.write(<span class="hljs-string">&quot;\n&quot;</span>);<br>   entityManager.detach(todo);<br>  &#125;));<br>  out.flush();<br> &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>  log.info(<span class="hljs-string">&quot;Exception occurred &quot;</span> + e.getMessage(), e);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Exception occurred while exporting results&quot;</span>, e);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>MySQL</tag>
      
      <tag>海量数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer II 009. 乘积小于 K 的连续子数组的个数</title>
    <link href="/2023/07/14/algorithm-offer5/"/>
    <url>/2023/07/14/algorithm-offer5/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/ZVAVXX/?envType=study-plan-v2&envId=coding-interviews-special">leetcode地址</a><br>给定一个正整数数组 nums和整数 k ，请找出该数组内乘积小于 k 的连续的子数组的个数。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><blockquote><p>输入: nums &#x3D; [10,5,2,6], k &#x3D; 100<br>输出: 8<br>解释: 8 个乘积小于 100 的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。<br>需要注意的是 [10,5,2] 并不是乘积小于100的子数组。</p></blockquote><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><blockquote><p>输入: nums &#x3D; [1,2,3], k &#x3D; 0<br>输出: 0</p></blockquote><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10 ^ 4<br>1 &lt;&#x3D; nums[i] &lt;&#x3D; 1000<br>0 &lt;&#x3D; k &lt;&#x3D; 10 ^ 6</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li><ol><li>双指针遍历。定义左右指针left和right, right向右扫描，找到以left为起点的符合条件的子数组；当不符合条件时left右移，同时重置right，重复之前的操作；</li></ol></li><li><ol start="2"><li>我们遍历整个数组 nums，定义两个指针 left 和 right，表示子数组的左右端点，用 res 变量保存符合条件的连续子数组的个数，并且定义 product 变量，表示当前子数组的乘积。<br>遍历数组中的每一个数，把当前数的值累乘到 product 中，如果 product 大于等于设定的值 k，向左移动左指针 left 并把左端元素除以 product 的值，直到当前区间内所有数的乘积都小于 k 为止。此时，减去左右端点之间的数的个数加一（因为是左开右闭区间），得到符合条件的区间的个数。<br>最后返回 res 变量的值，即为符合条件的连续子数组的个数。</li></ol></li></ul><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br> 方法<span class="hljs-number">1.</span> 双指针<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numSubarrayProductLessThanK</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//左边界</span><br>        <span class="hljs-keyword">while</span>(left&lt; nums.length) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 乘积</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> left; <span class="hljs-comment">// 每次重置右边界</span><br>            <span class="hljs-keyword">while</span>(right &lt; nums.length) &#123;<br>                sum *= nums[right]; <span class="hljs-comment">// 累乘判断是否小于K</span><br>                <span class="hljs-keyword">if</span>(sum &lt; k) &#123;<br>                    count++;<br>                    right++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            left++; <span class="hljs-comment">// 左边界前进一位</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>     &#125;<br><br> 方法<span class="hljs-number">2.</span> 滑动窗口<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numSubarrayProductLessThanK</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (k &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (right &lt; nums.length) &#123;<br>            product *= nums[right];<br>            <span class="hljs-keyword">while</span> (left &lt;= right &amp;&amp; product &gt;= k) &#123;<br>                product /= nums[left++];<br>            &#125;<br>            <span class="hljs-comment">//</span><br>            res += (right - left + <span class="hljs-number">1</span>);<br>            right++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//1.map解法</span><br>方法<span class="hljs-number">1.</span> 双指针<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">numSubarrayProductLessThanK</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    count := <span class="hljs-number">0</span> <span class="hljs-comment">// 记录个数</span><br>    left := <span class="hljs-number">0</span>  <span class="hljs-comment">// 左边界</span><br>    <span class="hljs-keyword">for</span> left &lt; <span class="hljs-built_in">len</span>(nums) &#123;<br>        sum := <span class="hljs-number">1</span>     <span class="hljs-comment">// 乘积</span><br>        right := left <span class="hljs-comment">// 每次重置右边界</span><br>        <span class="hljs-keyword">for</span> right &lt; <span class="hljs-built_in">len</span>(nums) &#123;<br>            sum *= nums[right] <span class="hljs-comment">// 累乘判断是否小于K</span><br>            <span class="hljs-keyword">if</span> sum &lt; k &#123;<br>                count++<br>                right++<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        left++ <span class="hljs-comment">// 左边界前进一位</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> count<br>&#125;<br><br> 方法<span class="hljs-number">2.</span> 滑动窗口<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">numSubarrayProductLessThanK</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> k &lt;= <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br>    left, right, res, product := <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> right &lt; <span class="hljs-built_in">len</span>(nums) &#123;<br>        product *= nums[right]<br>        <span class="hljs-keyword">for</span> left &lt;= right &amp;&amp; product &gt;= k &#123;<br>            product /= nums[left]<br>            left++<br>        &#125;<br>        res += (right - left + <span class="hljs-number">1</span>)<br>        right++<br>    &#125;<br>     <br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer II 006. 排序数组中两个数字之和</title>
    <link href="/2023/07/14/algorithm-offer4/"/>
    <url>/2023/07/14/algorithm-offer4/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/kLl5u1/?envType=study-plan-v2&envId=coding-interviews-special">leetcode地址</a><br>给定一个已按照 升序排列  的整数数组 numbers ，请你从数组中找出两个数满足相加之和等于目标数 target 。</p><p>函数应该以长度为 2 的整数数组的形式返回这两个数的下标值。numbers 的下标 从 0 开始计数 ，所以答案数组应当满足 0 &lt;&#x3D; answer[0] &lt; answer[1] &lt; numbers.length 。</p><p>假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><blockquote><p>输入：numbers &#x3D; [1,2,4,6,10], target &#x3D; 8<br>输出：[1,3]<br>解释：2 与 6 之和等于目标数 8 。因此 index1 &#x3D; 1, index2 &#x3D; 3 。</p></blockquote><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><blockquote><p>输入：numbers &#x3D; [2,3,4], target &#x3D; 6<br>输出：[0,2]</p></blockquote><h4 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h4><blockquote><p>输入：numbers &#x3D; [-1,0], target &#x3D; -1<br>输出：[0,1]</p></blockquote><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>2 &lt;&#x3D; numbers.length &lt;&#x3D; 3 * 104<br>-1000 &lt;&#x3D; numbers[i] &lt;&#x3D; 1000<br>numbers 按 非递减顺序 排列<br>-1000 &lt;&#x3D; target &lt;&#x3D; 1000<br>仅存在一个有效答案</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li><ol><li>由于给定数组为有序排列，所以第一想到的应该是二分查找，遍历数组，然后通过二分查找去找到target-numbers[i]。时间复杂度O(nlogn),空间复杂度O(1)。</li></ol></li><li><ol start="2"><li>由于给定数组为有序排列，所以可以用双指针从数组两边扫描不断逼近正确答案。时间复杂度为O(n), 空间复杂度为O(1);</li></ol></li></ul><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br> <span class="hljs-comment">//方法1. 二分查找</span><br>    <span class="hljs-comment">// public int[] twoSum(int[] numbers, int target) &#123;</span><br>    <span class="hljs-comment">//         if(numbers.length == 0 || numbers == null) return new int[0];</span><br>    <span class="hljs-comment">//         for(int i = 0; i&lt;numbers.length;i++) &#123;</span><br>    <span class="hljs-comment">//             int t = target - numbers[i];</span><br>    <span class="hljs-comment">//             int index = binarySearch(numbers, t, i+1, numbers.length-1);</span><br>    <span class="hljs-comment">//             if(index != -1) &#123;</span><br>    <span class="hljs-comment">//                 return new int[]&#123;i, index&#125;;</span><br>    <span class="hljs-comment">//             &#125;</span><br><br>    <span class="hljs-comment">//         &#125;</span><br>    <span class="hljs-comment">//         return new int[0];</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// int binarySearch(int[] numbers, int t,int left,int right) &#123;</span><br>    <span class="hljs-comment">//     while(left &lt;= right) &#123;</span><br>    <span class="hljs-comment">//         int mid = (left + right) &gt;&gt; 1;</span><br>    <span class="hljs-comment">//         if(numbers[mid] == t) &#123;</span><br>    <span class="hljs-comment">//             return mid;</span><br>    <span class="hljs-comment">//         &#125;else if(numbers[mid] &gt; t) &#123;</span><br>    <span class="hljs-comment">//             right = mid -1;</span><br>    <span class="hljs-comment">//         &#125;else if(numbers[mid] &lt; t) &#123;</span><br>    <span class="hljs-comment">//             left = mid +1;</span><br>    <span class="hljs-comment">//         &#125;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     return -1;</span><br>    <span class="hljs-comment">// &#125;</span><br><br> <span class="hljs-comment">//方法2. 双指针</span><br>    <span class="hljs-comment">// public int[] twoSum(int[] numbers, int target) &#123;</span><br>    <span class="hljs-comment">//     if(numbers.length == 0 || numbers == null) return new int[0];</span><br>    <span class="hljs-comment">//         </span><br>    <span class="hljs-comment">//         int left = 0;</span><br>    <span class="hljs-comment">//         int right = numbers.length -1;</span><br>    <span class="hljs-comment">//         while(left&lt;right) &#123;</span><br>    <span class="hljs-comment">//             int sum = numbers[left] + numbers[right];</span><br>    <span class="hljs-comment">//             if(sum == target) &#123;</span><br>    <span class="hljs-comment">//                 return new int[]&#123;left,right&#125;;</span><br>    <span class="hljs-comment">//             &#125; else if(sum&lt;target) &#123;</span><br>    <span class="hljs-comment">//                 left++;</span><br>    <span class="hljs-comment">//             &#125; else&#123;</span><br>    <span class="hljs-comment">//                 right--;</span><br>    <span class="hljs-comment">//             &#125;</span><br>    <span class="hljs-comment">//         &#125;</span><br>    <span class="hljs-comment">//         return new int[0];</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// 方法3. hashmap</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] numbers, <span class="hljs-type">int</span> target) &#123;<br>        Map&lt;Integer, Integer&gt; maps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i= <span class="hljs-number">0</span>;i&lt;numbers.length;i++) &#123;<br>            <span class="hljs-keyword">if</span>(maps.containsKey(target-numbers[i])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;maps.get(target-numbers[i]),i&#125;;<br>            &#125;<br>            maps.put(numbers[i],i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//1.map解法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(numbers []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    maps := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>)<br>    <span class="hljs-keyword">for</span> i, num := <span class="hljs-keyword">range</span> numbers &#123;<br>        <span class="hljs-keyword">if</span> j, ok := maps[target-num]; ok &#123;<br>            <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;j, i&#125;<br>        &#125;<br>        maps[num] = i<br>    &#125;<br>    <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// 2. 二分查找</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(numbers []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(numbers) == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(numbers); i++ &#123;<br>        t := target - numbers[i]<br>        index := binarySearch(numbers, t, i+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(numbers)<span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">if</span> index != <span class="hljs-number">-1</span> &#123;<br>            <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;i, index&#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(numbers []<span class="hljs-type">int</span>, t, left, right <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">for</span> left &lt;= right &#123;<br>        mid := (left + right) &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> numbers[mid] == t &#123;<br>            <span class="hljs-keyword">return</span> mid<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> numbers[mid] &gt; t &#123;<br>            right = mid - <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> numbers[mid] &lt; t &#123;<br>            left = mid + <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><br><span class="hljs-comment">//3.双指针</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(numbers []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(numbers) == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>    &#125;<br><br>    left, right := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(numbers)<span class="hljs-number">-1</span><br><br>    <span class="hljs-keyword">for</span> left &lt; right &#123;<br>        sum := numbers[left] + numbers[right]<br>        <span class="hljs-keyword">if</span> sum == target &#123;<br>            <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;left, right&#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> sum &lt; target &#123;<br>            left++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            right--<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>二分查找， 双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer II 003. 前 n 个数字二进制中 1 的个数</title>
    <link href="/2023/07/14/algorithm-offer3/"/>
    <url>/2023/07/14/algorithm-offer3/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/w3tCBm/?envType=study-plan-v2&envId=coding-interviews-special">leetcode地址</a><br>给定一个非负整数 n ，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><blockquote><p>输入: n &#x3D; 2<br>输出: [0,1,1]<br>解释:<br>0 –&gt; 0<br>1 –&gt; 1<br>2 –&gt; 10</p></blockquote><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><blockquote><p>输入: n &#x3D; 5<br>输出: [0,1,1,2,1,2]<br>解释:<br>0 –&gt; 0<br>1 –&gt; 1<br>2 –&gt; 10<br>3 –&gt; 11<br>4 –&gt; 100<br>5 –&gt; 101</p></blockquote><p>说明 :</p><ul><li>0 &lt;&#x3D; n &lt;&#x3D; 105</li></ul><p>进阶:</p><ul><li>给出时间复杂度为 O(n*sizeof(integer)) 的解答非常容易。但你可以在线性时间 O(n) 内用一趟扫描做到吗？</li><li>要求算法的空间复杂度为 O(n) 。</li><li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount ）来执行此操作。</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>求二进制中的1的个数，我们可以根据数的奇偶性原则找到对应关系：</p><ul><li>当数字i为偶数时，它的二进制中1的个数等于i&#x2F;2二进制中1的个数。因为在二进制中除以2即相当于把原来的数字右移一位，在高位补0，如 110（6）右移一位为011（3）。由此可得到状态方程：f(i) &#x3D; f(i&gt;&gt;1), i为偶数；</li><li>当数字i为奇数时，它的二进制中1的个数等于它的前一位数字中1的个数加1（因为它的前一位数字为偶数，最低位为0），可得到状态方程f(i) &#x3D; f(i-1) + 1;由此可得到以下代码：</li></ul><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//利用奇偶性质，偶数的二进制1的个数一定等于右移一位后的1的个数</span><br>    <span class="hljs-comment">//奇数的二进制1的个数一定等于前一个数的1的个数+1</span><br>    <span class="hljs-comment">//得到状态方程：f(i) = f(i-1) +1; i为奇数</span><br>    <span class="hljs-comment">// f(i) = f(i&gt;&gt;1)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countBits(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br>            ans[i] = ans[i&gt;&gt;<span class="hljs-number">1</span>] + (i&amp;<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br><br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countBits</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    <span class="hljs-comment">//利用奇偶性质，偶数的二进制1的个数一定等于右移一位后的1的个数</span><br>    <span class="hljs-comment">//奇数的二进制1的个数一定等于前一个数的1的个数+1</span><br>    <span class="hljs-comment">//得到状态方程：f(i) = f(i-1) +1; i为奇数</span><br>    <span class="hljs-comment">// f(i) = f(i&gt;&gt;1)</span><br>    ans := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>;i&lt;=n; i++ &#123;<br>        <span class="hljs-keyword">if</span>((i&amp;<span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 偶数</span><br>            ans[i] = ans[i&gt;&gt;<span class="hljs-number">1</span>]<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            ans[i] = ans[i<span class="hljs-number">-1</span>] +<span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>奇偶性质</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer II 002. 二进制加法</title>
    <link href="/2023/07/14/algorithm-offer2/"/>
    <url>/2023/07/14/algorithm-offer2/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/JFETK5/description/?envType=study-plan-v2&envId=coding-interviews-special">leetcode地址</a></p><ul><li>剑指 Offer II 002. 二进制加法<br>给定两个 01 字符串 a 和 b ，请计算它们的和，并以二进制字符串的形式输出。<br>输入为 非空 字符串且只包含数字 1 和 0。</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>示例 1:</p><blockquote><p>输入: a &#x3D; “11”, b &#x3D; “10”<br>输出: “101”</p></blockquote><p>示例 2:</p><blockquote><p>输入: a &#x3D; “1010”, b &#x3D; “1011”<br>输出: “10101”</p></blockquote><p>提示：</p><p>每个字符串仅由字符 ‘0’ 或 ‘1’ 组成。<br>1 &lt;&#x3D; a.length, b.length &lt;&#x3D; 10^4<br>字符串如果不是 “0” ，就都不含前导零。</p><ul><li>提示:</li><li>-2 ^ 31 &lt;&#x3D; a, b &lt;&#x3D; 2 ^ 31 - 1</li><li>b !&#x3D; 0</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题还是比较好理解的，类似整数加法，只不过是“逢2进1”，我们只需要以两个数的右边对齐，逐位开始相加（需加上进位，初始值位0），若大于2则进位1，取2的余数作为结果拼接上；若小于2直接拼接到结果。两个字符串都遍历完且没有进位返回结果。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>本题给出的二进制数字是字符串形式，不可以转化成 int 型，因为可能溢出；</li></ul><ul><li>两个「加数」的字符串长度可能不同；</li><li>在最后，如果进位 carry 不为 0，那么最后需要计算进位；</li></ul><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBinary</span><span class="hljs-params">(String a, String b)</span> &#123;<br>       <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(); <span class="hljs-comment">// 返回结果</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> a.length() - <span class="hljs-number">1</span>; <span class="hljs-comment">//遍历索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> b.length() - <span class="hljs-number">1</span>; <span class="hljs-comment">//遍历索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 进位初始值为0</span><br>        <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span> || carry != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 当字符串a,b都遍历完且carry为0时结束。</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">digitA</span> <span class="hljs-operator">=</span> i &gt;= <span class="hljs-number">0</span> ? a.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">0</span>; <span class="hljs-comment">// 从右边开始取每一位的值</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">digitB</span> <span class="hljs-operator">=</span> j &gt;= <span class="hljs-number">0</span> ? b.charAt(j) - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> digitA + digitB + carry; <span class="hljs-comment">// 求和</span><br>            carry = sum &gt;= <span class="hljs-number">2</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>; <span class="hljs-comment">// 取进位</span><br>            sum = sum &gt;= <span class="hljs-number">2</span> ? sum - <span class="hljs-number">2</span> : sum; <span class="hljs-comment">// 若和大于2取余数；</span><br>            res = res.append(sum);结果拼接<br>            i--; <span class="hljs-comment">// 从右往左遍历</span><br>            j--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.reverse().toString(); <span class="hljs-comment">// 因为从右边开始拼接，结果需反转</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addBinary</span><span class="hljs-params">(a <span class="hljs-type">string</span>, b <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    res := <span class="hljs-string">&quot;&quot;</span><br>    i := <span class="hljs-built_in">len</span>(a) - <span class="hljs-number">1</span><br>    j := <span class="hljs-built_in">len</span>(b) - <span class="hljs-number">1</span><br>    carry := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span> || carry != <span class="hljs-number">0</span> &#123;<br>        digitA := <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-number">0</span> &#123;<br>            digitA = <span class="hljs-type">int</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>)<br>        &#125;<br>        digitB := <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> j &gt;= <span class="hljs-number">0</span> &#123;<br>            digitB = <span class="hljs-type">int</span>(b[j] - <span class="hljs-string">&#x27;0&#x27;</span>)<br>        &#125;<br>        sum := digitA + digitB + carry<br>        carry = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> sum &gt;= <span class="hljs-number">2</span> &#123;<br>            carry = <span class="hljs-number">1</span><br>        &#125;<br>        sum = sum % <span class="hljs-number">2</span><br>        res = strconv.Itoa(sum) + res<br>        i--<br>        j--<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>二进制加法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer II 001. 整数除法</title>
    <link href="/2023/07/13/algorithm-offer1/"/>
    <url>/2023/07/13/algorithm-offer1/</url>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p><a href="https://leetcode.cn/problems/xoh6Oh/?envType=study-plan-v2&id=coding-interviews-special">leetcode地址</a></p><ul><li>剑指 Offer II 001. 整数除法</li><li>简单</li><li>253</li><li>给定两个整数 a 和 b ，求它们的除法的商 a&#x2F;b ，要求不得使用乘号 ‘*’、除号 ‘&#x2F;‘ 以及求余符号 ‘%’ 。</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) &#x3D; 8 以及 truncate(-2.7335) &#x3D; -2</li><li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2 ^ 31，2 ^ 31 -1 ]。本题中，如果除法结果溢出，则返回 2^31 − 1</li></ul><blockquote><p>示例 1：<br>  输入：a &#x3D; 15, b &#x3D; 2<br>  输出：7<br>  解释：15&#x2F;2 &#x3D; truncate(7.5) &#x3D; 7<br>  示例 2：<br>  输入：a &#x3D; 7, b &#x3D; -3<br>  输出：-2<br>  解释：7&#x2F;-3 &#x3D; truncate(-2.33333..) &#x3D; -2<br>  示例 3：<br>  输入：a &#x3D; 0, b &#x3D; 1<br>  输出：0<br>  示例 4：<br>  输入：a &#x3D; 1, b &#x3D; 1<br>  输出：1</p></blockquote><ul><li>提示:</li><li>-2 ^ 31 &lt;&#x3D; a, b &lt;&#x3D; 2 ^ 31 - 1</li><li>b !&#x3D; 0<br> *&#x2F;</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目要求只能使用加减法，那我们自然想到用减法实现除法，用“被减数”能减去几次“减数”来衡量最后的结果，这时候我们想到求x的幂次的快速解法，将x成倍成倍的求幂，这里将减数成倍成倍的增大，次数对应也是成倍成倍的增大，例如：取a&#x3D;23，b&#x3D;2，b的变化如下:2-&gt;4-&gt;8-&gt;16,次数count的变化如下1-&gt;2-&gt;4-&gt;8,最后a-b&#x3D;23-16&#x3D;7，对7再执行一次上述过程，b:2-&gt;4,count:1-&gt;2,a-b&#x3D;3, 然后对3再执行一次，b:2,count:1,a-b&#x3D;1，1已经小于原b&#x3D;2，可以结束了，最后计数一下每轮的count是多少8+2+1&#x3D;11。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>为方便运算，我们需要将a，b都转为同正or同负，由于INT_MIN转正就越界了，我们只好都转负，这也是都转负的原因，有一种特殊情况 INT_MIN&#x2F;(-1)就overflow了 所以直接特殊处理最终结果的正负。</p><h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-comment">//特殊情况直接处理</span><br>        <span class="hljs-keyword">if</span> (a == Integer.MIN_VALUE &amp;&amp; b == -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> Integer.MAX_VALUE;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> a;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 记录a,b取反标志，如只有一个取反，则最终结果也要取反</span><br>        <span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">0</span>) &#123;<br>            flag--;<br>            a = -a;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>            flag--;<br>            b = -b;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> calc(a, b);<br>        <span class="hljs-keyword">return</span> flag == <span class="hljs-number">1</span> ? -res : res;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 求a能减去b的次数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (a &lt;= b) &#123; <span class="hljs-comment">// a,b为负数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> b; <span class="hljs-comment">// 临时变量</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 记录a被减的次数，因为a&gt;b,所以a一定可以被b减一次</span><br>            <span class="hljs-keyword">while</span> (temp &gt;= Integer.MIN_VALUE &gt;&gt; <span class="hljs-number">1</span> &amp;&amp; a &lt;= temp &lt;&lt; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// temp应该大于等于最小值的二分之一，否则会导致溢出。a的绝对值应该比temp*2还小</span><br>                count += count; <span class="hljs-comment">// 可以减的次数翻倍</span><br>                temp += temp; <span class="hljs-comment">// 减数也翻倍</span><br>            &#125;<br>            res += count; <span class="hljs-comment">// 可以减的次数累加即为结果</span><br>            a -= temp; <span class="hljs-comment">// a减去当前temp，重新去和b求最大可以减的次数</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="代码实现（golang）"><a href="#代码实现（golang）" class="headerlink" title="代码实现（golang）"></a>代码实现（golang）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">divide</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-comment">//特殊情况直接处理</span><br>    <span class="hljs-keyword">if</span> a == math.MinInt32 &amp;&amp; b == <span class="hljs-number">-1</span> &#123;<br>        <span class="hljs-keyword">return</span> math.MaxInt32<br>    &#125;<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    flag := <span class="hljs-number">2</span> <span class="hljs-comment">// 记录a,b取反标志，如只有一个取反，则最终结果也要取反</span><br>    <span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">0</span> &#123;<br>        flag--<br>        a = -a<br>    &#125;<br>    <span class="hljs-keyword">if</span> b &gt; <span class="hljs-number">0</span> &#123;<br>        flag--<br>        b = -b<br>    &#125;<br>    res := calc(a, b)<br>    <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> -res<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-comment">// 求a能减去b的次数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calc</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    res := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> a &lt;= b &#123; <span class="hljs-comment">// a,b为负数</span><br>        temp := b <span class="hljs-comment">// 临时变量</span><br>        count := <span class="hljs-number">1</span> <span class="hljs-comment">// 记录a被减的次数，因为a&gt;b,所以a一定可以被b减一次</span><br>        <span class="hljs-keyword">for</span> temp &gt;= math.MinInt32/<span class="hljs-number">2</span> &amp;&amp; a &lt;= temp&lt;&lt;<span class="hljs-number">1</span> &#123; <span class="hljs-comment">// temp应该大于等于最小值的二分之一，否则会导致溢出。a的绝对值应该比temp*2还小</span><br>            count += count <span class="hljs-comment">// 可以减的次数翻倍</span><br>            temp += temp <span class="hljs-comment">// 减数也翻倍</span><br>        &#125;<br>        res += count <span class="hljs-comment">// 可以减的次数累加即为结果</span><br>        a -= temp <span class="hljs-comment">// a减去当前temp，重新去和b求最大可以减的次数</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指 Offer II</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>整数除法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My First Blog</title>
    <link href="/2023/07/13/hello-world/"/>
    <url>/2023/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
